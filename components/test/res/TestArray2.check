[[syntax trees at end of                     typer]] // newSource1
package <empty> {
  import scala.reflect.ClassTag;
  import ch.epfl.lamp.specialized._;
  class TestArray2Reverse[T >: Nothing <: Any] extends scala.AnyRef {
    implicit <paramaccessor> private[this] val classTag: scala.reflect.ClassTag[T] = _;
    def <init>()(implicit classTag: scala.reflect.ClassTag[T]): TestArray2Reverse[T] = {
      TestArray2Reverse.super.<init>();
      ()
    };
    private[this] val arr: Array[T] = TestArray2Reverse.this.classTag.newArray(2);
    <stable> <accessor> def arr: Array[T] = TestArray2Reverse.this.arr;
    private[this] val arrB: Array[T] = TestArray2Reverse.this.classTag.newArray(scala.this.Predef.genericArrayOps[T](TestArray2Reverse.this.arr).size);
    <stable> <accessor> def arrB: Array[T] = TestArray2Reverse.this.arrB;
    def reverse: <error> = {
      def specialized1[@specialized U >: Nothing <: Any](TestArray2Reverse_this_arr1: Array[U], TestArray2Reverse_this_arrB1: Array[U]): <error> = {
        val temp: U = TestArray2Reverse_this_arr1.apply(0);
        TestArray2Reverse_this_arrB1.update(0, TestArray2Reverse_this_arr1.apply(1));
        TestArray2Reverse_this_arrB1.update(1, <temp1: error>)
      };
      if (TestArray2Reverse.this.classTag.==(Predef.manifest[Int](ManifestFactory.Int)))
  specialized1[Int](TestArray2Reverse.this.arr.asInstanceOf[Array[Int]], TestArray2Reverse.this.arrB.asInstanceOf[Array[Int]])
else
  if (TestArray2Reverse.this.classTag.==(Predef.manifest[Double](ManifestFactory.Double)))
    specialized1[Double](TestArray2Reverse.this.arr.asInstanceOf[Array[Double]], TestArray2Reverse.this.arrB.asInstanceOf[Array[Double]])
  else
    if (TestArray2Reverse.this.classTag.==(Predef.manifest[Boolean](ManifestFactory.Boolean)))
      specialized1[Boolean](TestArray2Reverse.this.arr.asInstanceOf[Array[Boolean]], TestArray2Reverse.this.arrB.asInstanceOf[Array[Boolean]])
    else
      specialized1[T](TestArray2Reverse.this.arr, TestArray2Reverse.this.arrB).asInstanceOf[Unit]
    };
    def copy: Unit = {
      def specialized2[@specialized U >: Nothing <: Any](TestArray2Reverse_this_arrB2: Array[U], TestArray2Reverse_this_arr2: Array[U]): Unit = {
        TestArray2Reverse_this_arrB2.update(0, TestArray2Reverse_this_arr2.apply(0));
        TestArray2Reverse_this_arrB2.update(1, TestArray2Reverse_this_arr2.apply(1))
      };
      if (TestArray2Reverse.this.classTag.==(Predef.manifest[Int](ManifestFactory.Int)))
  specialized2[Int](TestArray2Reverse.this.arrB.asInstanceOf[Array[Int]], TestArray2Reverse.this.arr.asInstanceOf[Array[Int]])
else
  if (TestArray2Reverse.this.classTag.==(Predef.manifest[Double](ManifestFactory.Double)))
    specialized2[Double](TestArray2Reverse.this.arrB.asInstanceOf[Array[Double]], TestArray2Reverse.this.arr.asInstanceOf[Array[Double]])
  else
    if (TestArray2Reverse.this.classTag.==(Predef.manifest[Boolean](ManifestFactory.Boolean)))
      specialized2[Boolean](TestArray2Reverse.this.arrB.asInstanceOf[Array[Boolean]], TestArray2Reverse.this.arr.asInstanceOf[Array[Boolean]])
    else
      specialized2[T](TestArray2Reverse.this.arrB, TestArray2Reverse.this.arr).asInstanceOf[Unit]
    };
    def size: Int = {
      def specialized3[@specialized U >: Nothing <: Any](TestArray2Reverse_this_arr3: Array[U]): Int = TestArray2Reverse_this_arr3.size;
      if (TestArray2Reverse.this.classTag.==(Predef.manifest[Int](ManifestFactory.Int)))
  specialized3[Int](TestArray2Reverse.this.arr.asInstanceOf[Array[Int]])
else
  if (TestArray2Reverse.this.classTag.==(Predef.manifest[Double](ManifestFactory.Double)))
    specialized3[Double](TestArray2Reverse.this.arr.asInstanceOf[Array[Double]])
  else
    if (TestArray2Reverse.this.classTag.==(Predef.manifest[Boolean](ManifestFactory.Boolean)))
      specialized3[Boolean](TestArray2Reverse.this.arr.asInstanceOf[Array[Boolean]])
    else
      specialized3[T](TestArray2Reverse.this.arr).asInstanceOf[Int]
    };
    def copy2: <error> = {
      val arrB: Array[T] = this.arrB;
      {
        def specialized4[@specialized U >: Nothing <: Any](TestArray2Reverse_this_arr4: Array[U]): <error> = {
          TestArray2Reverse_this_arr4.update(0, arrB.apply(0));
          TestArray2Reverse_this_arr4.update(1, arrB.apply(1))
        };
        if (TestArray2Reverse.this.classTag.==(Predef.manifest[Int](ManifestFactory.Int)))
  specialized4[Int](TestArray2Reverse.this.arr.asInstanceOf[Array[Int]])
else
  if (TestArray2Reverse.this.classTag.==(Predef.manifest[Double](ManifestFactory.Double)))
    specialized4[Double](TestArray2Reverse.this.arr.asInstanceOf[Array[Double]])
  else
    if (TestArray2Reverse.this.classTag.==(Predef.manifest[Boolean](ManifestFactory.Boolean)))
      specialized4[Boolean](TestArray2Reverse.this.arr.asInstanceOf[Array[Boolean]])
    else
      specialized4[T](TestArray2Reverse.this.arr).asInstanceOf[Unit]
      }
    }
  }
}
