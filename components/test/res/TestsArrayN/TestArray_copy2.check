[[syntax trees at end of                     typer]] // newSource1.scala
package <empty> {
  import scala.reflect.ClassTag;
  import ch.epfl.lamp.specialized._;
  class TestArray[T >: Nothing <: Any] extends scala.AnyRef {
    <paramaccessor> private[this] val arrA: Array[T] = _;
    implicit <paramaccessor> private[this] val classTag: scala.reflect.ClassTag[T] = _;
    def <init>(arrA: Array[T])(implicit classTag: scala.reflect.ClassTag[T]): TestArray[T] = {
      TestArray.super.<init>();
      ()
    };
    private[this] val arrB: Array[T] = TestArray.this.classTag.newArray(TestArray.this.arrA.length);
    <stable> <accessor> def arrB: Array[T] = TestArray.this.arrB;
    def copy2: Unit = {
      object SpecObject1 extends scala.AnyRef {
        def <init>(): SpecObject1.type = {
          SpecObject1.super.<init>();
          ()
        };
        def copy2_specialized1[@specialized(scala.Boolean, scala.Double, scala.Int) T >: Nothing <: Any](TestArray_this_arrA1: Array[T], TestArray_this_arrB1: Array[T]): Unit = {
          var i: Int = 0;
          while$1(){
            if (i.<(TestArray_this_arrA1.length))
              {
                {
                  TestArray_this_arrB1.update(i, TestArray_this_arrA1.apply(i));
                  i = i.+(1)
                };
                while$1()
              }
            else
              ()
          }
        }
      };
      import SpecObject1._;
      import scala.reflect.ManifestFactory;
      if (TestArray.this.classTag.==(scala.reflect.ManifestFactory.Boolean))
        SpecObject1.copy2_specialized1[Boolean](TestArray.this.arrA.asInstanceOf[Array[Boolean]], TestArray.this.arrB.asInstanceOf[Array[Boolean]])
      else
        if (TestArray.this.classTag.==(scala.reflect.ManifestFactory.Double))
          SpecObject1.copy2_specialized1[Double](TestArray.this.arrA.asInstanceOf[Array[Double]], TestArray.this.arrB.asInstanceOf[Array[Double]])
        else
          if (TestArray.this.classTag.==(scala.reflect.ManifestFactory.Int))
            SpecObject1.copy2_specialized1[Int](TestArray.this.arrA.asInstanceOf[Array[Int]], TestArray.this.arrB.asInstanceOf[Array[Int]])
          else
            SpecObject1.copy2_specialized1[T](TestArray.this.arrA, TestArray.this.arrB)
    }
  }
}

[[syntax trees at end of                       jvm]] // newSource1.scala
package <empty> {
  class TestArray extends Object {
    private def SpecObject1$1$lzycompute(x$1: runtime.VolatileObjectRef): TestArray#TestArray$SpecObject1$2.type = {
      {
        TestArray.this.synchronized({
          if (x$1.elem.eq(null))
            {
              x$1.elem = new TestArray#TestArray$SpecObject1$2.type(TestArray.this);
              ()
            };
          scala.runtime.BoxedUnit.UNIT
        });
        null
      };
      x$1.elem.$asInstanceOf[TestArray#TestArray$SpecObject1$2.type]()
    };
    <paramaccessor> private[this] val arrA: Object = _;
    implicit <paramaccessor> private[this] val classTag: reflect.ClassTag = _;
    private[this] val arrB: Object = _;
    <stable> <accessor> def arrB(): Object = TestArray.this.arrB;
    def copy2(): Unit = {
      @volatile var SpecObject1$module: runtime.VolatileObjectRef = new runtime.VolatileObjectRef(null);
      if (TestArray.this.classTag.==(scala.reflect.ManifestFactory.Boolean()))
        TestArray.this.SpecObject1$1(SpecObject1$module).copy2_specialized1$mZc$sp(TestArray.this.arrA.$asInstanceOf[Array[Boolean]](), TestArray.this.arrB().$asInstanceOf[Array[Boolean]]())
      else
        if (TestArray.this.classTag.==(scala.reflect.ManifestFactory.Double()))
          TestArray.this.SpecObject1$1(SpecObject1$module).copy2_specialized1$mDc$sp(TestArray.this.arrA.$asInstanceOf[Array[Double]](), TestArray.this.arrB().$asInstanceOf[Array[Double]]())
        else
          if (TestArray.this.classTag.==(scala.reflect.ManifestFactory.Int()))
            TestArray.this.SpecObject1$1(SpecObject1$module).copy2_specialized1$mIc$sp(TestArray.this.arrA.$asInstanceOf[Array[Int]](), TestArray.this.arrB().$asInstanceOf[Array[Int]]())
          else
            TestArray.this.SpecObject1$1(SpecObject1$module).copy2_specialized1(TestArray.this.arrA, TestArray.this.arrB())
    };
    final <stable> private[this] def SpecObject1$1(SpecObject1$module$1: runtime.VolatileObjectRef): TestArray#TestArray$SpecObject1$2.type = if (SpecObject1$module$1.elem.eq(null))
      TestArray.this.SpecObject1$1$lzycompute(SpecObject1$module$1)
    else
      SpecObject1$module$1.elem.$asInstanceOf[TestArray#TestArray$SpecObject1$2.type]();
    def <init>(arrA: Object, classTag: reflect.ClassTag): TestArray = {
      TestArray.this.arrA = arrA;
      TestArray.this.classTag = classTag;
      TestArray.super.<init>();
      TestArray.this.arrB = classTag.newArray(runtime.this.ScalaRunTime.array_length(arrA));
      ()
    }
  };
  object TestArray$SpecObject1$2 extends Object {
    def copy2_specialized1(TestArray_this_arrA1: Object, TestArray_this_arrB1: Object): Unit = {
      var i: Int = 0;
      while$1(){
        if (i.<(runtime.this.ScalaRunTime.array_length(TestArray_this_arrA1)))
          {
            {
              runtime.this.ScalaRunTime.array_update(TestArray_this_arrB1, i, runtime.this.ScalaRunTime.array_apply(TestArray_this_arrA1, i));
              i = i.+(1)
            };
            while$1()
          }
        else
          ()
      }
    };
    <specialized> def copy2_specialized1$mZc$sp(TestArray_this_arrA1: Array[Boolean], TestArray_this_arrB1: Array[Boolean]): Unit = {
      var i: Int = 0;
      while$1(){
        if (i.<(TestArray_this_arrA1.length()))
          {
            {
              TestArray_this_arrB1.update(i, TestArray_this_arrA1.apply(i));
              i = i.+(1)
            };
            while$1()
          }
        else
          ()
      }
    };
    <specialized> def copy2_specialized1$mDc$sp(TestArray_this_arrA1: Array[Double], TestArray_this_arrB1: Array[Double]): Unit = {
      var i: Int = 0;
      while$1(){
        if (i.<(TestArray_this_arrA1.length()))
          {
            {
              TestArray_this_arrB1.update(i, TestArray_this_arrA1.apply(i));
              i = i.+(1)
            };
            while$1()
          }
        else
          ()
      }
    };
    <specialized> def copy2_specialized1$mIc$sp(TestArray_this_arrA1: Array[Int], TestArray_this_arrB1: Array[Int]): Unit = {
      var i: Int = 0;
      while$1(){
        if (i.<(TestArray_this_arrA1.length()))
          {
            {
              TestArray_this_arrB1.update(i, TestArray_this_arrA1.apply(i));
              i = i.+(1)
            };
            while$1()
          }
        else
          ()
      }
    };
    def <init>($outer: TestArray): TestArray#TestArray$SpecObject1$2.type = {
      TestArray$SpecObject1$2.super.<init>();
      ()
    }
  }
}
