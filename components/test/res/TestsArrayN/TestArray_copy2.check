newSource1.scala:8: warning: specialized[T] {...} does not support while loops
    specialized[T](Int, Double, Boolean) {
                                         ^
[[syntax trees at end of                     typer]] // newSource1.scala
package <empty> {
  import scala.reflect.ClassTag;
  import ch.epfl.lamp.specialized._;
  class TestArray[T >: Nothing <: Any] extends scala.AnyRef {
    <paramaccessor> private[this] val arrA: Array[T] = _;
    implicit <paramaccessor> private[this] val classTag: scala.reflect.ClassTag[T] = _;
    def <init>(arrA: Array[T])(implicit classTag: scala.reflect.ClassTag[T]): TestArray[T] = {
      TestArray.super.<init>();
      ()
    };
    private[this] val arrB: Array[T] = TestArray.this.classTag.newArray(TestArray.this.arrA.length);
    <stable> <accessor> def arrB: Array[T] = TestArray.this.arrB;
    def copy2: Unit = {
      var i: Int = 0;
      while$1(){
        if (i.<(TestArray.this.arrA.length))
          {
            {
              TestArray.this.arrB.update(i, TestArray.this.arrA.apply(i));
              i = i.+(1)
            };
            while$1()
          }
        else
          ()
      }
    }
  }
}

[[syntax trees at end of                       jvm]] // newSource1.scala
package <empty> {
  class TestArray extends Object {
    <paramaccessor> private[this] val arrA: Object = _;
    private[this] val arrB: Object = _;
    <stable> <accessor> def arrB(): Object = TestArray.this.arrB;
    def copy2(): Unit = {
      var i: Int = 0;
      while$1(){
        if (i.<(runtime.this.ScalaRunTime.array_length(TestArray.this.arrA)))
          {
            {
              runtime.this.ScalaRunTime.array_update(TestArray.this.arrB(), i, runtime.this.ScalaRunTime.array_apply(TestArray.this.arrA, i));
              i = i.+(1)
            };
            while$1()
          }
        else
          ()
      }
    };
    def <init>(arrA: Object, classTag: reflect.ClassTag): TestArray = {
      TestArray.this.arrA = arrA;
      TestArray.super.<init>();
      TestArray.this.arrB = classTag.newArray(runtime.this.ScalaRunTime.array_length(arrA));
      ()
    }
  }
}