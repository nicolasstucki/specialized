[[syntax trees at end of                     typer]] // newSource1.scala
package <empty> {
  import scala.reflect.ClassTag;
  import ch.epfl.lamp.specialized._;
  class TestArray[T >: Nothing <: Any] extends scala.AnyRef {
    <paramaccessor> private[this] val arr: Array[T] = _;
    implicit <paramaccessor> private[this] val classTag: scala.reflect.ClassTag[T] = _;
    def <init>(arr: Array[T])(implicit classTag: scala.reflect.ClassTag[T]): TestArray[T] = {
      TestArray.super.<init>();
      ()
    };
    def reverse: Unit = {
      object SpecObject1 extends scala.AnyRef {
        def <init>(): SpecObject1.type = {
          SpecObject1.super.<init>();
          ()
        };
        def reverse_specialized1[@specialized(scala.Boolean, scala.Double, scala.Int) T >: Nothing <: Any](TestArray_this_arr1: Array[T]): Unit = scala.this.Predef.intWrapper(0).to(TestArray_this_arr1.length./(2)).foreach[Unit](((i: Int) => {
          val j: Int = TestArray_this_arr1.length.-(i).-(1);
          val temp: T = TestArray_this_arr1.apply(j);
          TestArray_this_arr1.update(j, TestArray_this_arr1.apply(i));
          TestArray_this_arr1.update(i, temp)
        }))
      };
      import SpecObject1._;
      import scala.reflect.ManifestFactory;
      if (TestArray.this.classTag.==(scala.reflect.ManifestFactory.Boolean))
        SpecObject1.reverse_specialized1[Boolean](TestArray.this.arr.asInstanceOf[Array[Boolean]])
      else
        if (TestArray.this.classTag.==(scala.reflect.ManifestFactory.Double))
          SpecObject1.reverse_specialized1[Double](TestArray.this.arr.asInstanceOf[Array[Double]])
        else
          if (TestArray.this.classTag.==(scala.reflect.ManifestFactory.Int))
            SpecObject1.reverse_specialized1[Int](TestArray.this.arr.asInstanceOf[Array[Int]])
          else
            SpecObject1.reverse_specialized1[T](TestArray.this.arr)
    }
  }
}

[[syntax trees at end of                       jvm]] // newSource1.scala
package <empty> {
  class TestArray extends Object {
    private def SpecObject1$1$lzycompute(x$1: runtime.VolatileObjectRef): TestArray#TestArray$SpecObject1$2.type = {
      {
        TestArray.this.synchronized({
          if (x$1.elem.eq(null))
            {
              x$1.elem = new TestArray#TestArray$SpecObject1$2.type(TestArray.this);
              ()
            };
          scala.runtime.BoxedUnit.UNIT
        });
        null
      };
      x$1.elem.$asInstanceOf[TestArray#TestArray$SpecObject1$2.type]()
    };
    <paramaccessor> private[this] val arr: Object = _;
    implicit <paramaccessor> private[this] val classTag: reflect.ClassTag = _;
    def reverse(): Unit = {
      @volatile var SpecObject1$module: runtime.VolatileObjectRef = new runtime.VolatileObjectRef(null);
      if (TestArray.this.classTag.==(scala.reflect.ManifestFactory.Boolean()))
        TestArray.this.SpecObject1$1(SpecObject1$module).reverse_specialized1$mZc$sp(TestArray.this.arr.$asInstanceOf[Array[Boolean]]())
      else
        if (TestArray.this.classTag.==(scala.reflect.ManifestFactory.Double()))
          TestArray.this.SpecObject1$1(SpecObject1$module).reverse_specialized1$mDc$sp(TestArray.this.arr.$asInstanceOf[Array[Double]]())
        else
          if (TestArray.this.classTag.==(scala.reflect.ManifestFactory.Int()))
            TestArray.this.SpecObject1$1(SpecObject1$module).reverse_specialized1$mIc$sp(TestArray.this.arr.$asInstanceOf[Array[Int]]())
          else
            TestArray.this.SpecObject1$1(SpecObject1$module).reverse_specialized1(TestArray.this.arr)
    };
    final <stable> private[this] def SpecObject1$1(SpecObject1$module$1: runtime.VolatileObjectRef): TestArray#TestArray$SpecObject1$2.type = if (SpecObject1$module$1.elem.eq(null))
      TestArray.this.SpecObject1$1$lzycompute(SpecObject1$module$1)
    else
      SpecObject1$module$1.elem.$asInstanceOf[TestArray#TestArray$SpecObject1$2.type]();
    def <init>(arr: Object, classTag: reflect.ClassTag): TestArray = {
      TestArray.this.arr = arr;
      TestArray.this.classTag = classTag;
      TestArray.super.<init>();
      ()
    }
  };
  @SerialVersionUID(0) final <synthetic> class TestArray$SpecObject1$2$$anonfun$reverse_specialized1$1 extends runtime.AbstractFunction1$mcVI$sp with Serializable {
    final def apply(i: Int): Unit = TestArray$SpecObject1$2$$anonfun$reverse_specialized1$1.this.apply$mcVI$sp(i);
    <specialized> def apply$mcVI$sp(i: Int): Unit = {
      val j: Int = runtime.this.ScalaRunTime.array_length(TestArray$SpecObject1$2$$anonfun$reverse_specialized1$1.this.TestArray_this_arr1$1).-(i).-(1);
      val temp: Object = runtime.this.ScalaRunTime.array_apply(TestArray$SpecObject1$2$$anonfun$reverse_specialized1$1.this.TestArray_this_arr1$1, j);
      runtime.this.ScalaRunTime.array_update(TestArray$SpecObject1$2$$anonfun$reverse_specialized1$1.this.TestArray_this_arr1$1, j, runtime.this.ScalaRunTime.array_apply(TestArray$SpecObject1$2$$anonfun$reverse_specialized1$1.this.TestArray_this_arr1$1, i));
      runtime.this.ScalaRunTime.array_update(TestArray$SpecObject1$2$$anonfun$reverse_specialized1$1.this.TestArray_this_arr1$1, i, temp)
    };
    final <bridge> def apply(v1: Object): Object = {
      TestArray$SpecObject1$2$$anonfun$reverse_specialized1$1.this.apply(scala.Int.unbox(v1));
      scala.runtime.BoxedUnit.UNIT
    };
    <synthetic> <paramaccessor> private[this] val TestArray_this_arr1$1: Object = _;
    def <init>($outer: TestArray#TestArray$SpecObject1$2.type, TestArray_this_arr1$1: Object): anonymous class anonfun$reverse_specialized1$1 = {
      TestArray$SpecObject1$2$$anonfun$reverse_specialized1$1.this.TestArray_this_arr1$1 = TestArray_this_arr1$1;
      TestArray$SpecObject1$2$$anonfun$reverse_specialized1$1.super.<init>();
      ()
    }
  };
  final <synthetic> class TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mZc$sp$1 extends runtime.AbstractFunction1$mcVI$sp with Serializable {
    final def apply(i: Int): Unit = TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mZc$sp$1.this.apply$mcVI$sp(i);
    <specialized> def apply$mcVI$sp(i: Int): Unit = {
      val j: Int = TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mZc$sp$1.this.TestArray_this_arr1$2.length().-(i).-(1);
      val temp: Boolean = TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mZc$sp$1.this.TestArray_this_arr1$2.apply(j);
      TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mZc$sp$1.this.TestArray_this_arr1$2.update(j, TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mZc$sp$1.this.TestArray_this_arr1$2.apply(i));
      TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mZc$sp$1.this.TestArray_this_arr1$2.update(i, temp)
    };
    final <bridge> def apply(v1: Object): Object = {
      TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mZc$sp$1.this.apply(scala.Int.unbox(v1));
      scala.runtime.BoxedUnit.UNIT
    };
    <synthetic> <paramaccessor> private[this] val TestArray_this_arr1$2: Array[Boolean] = _;
    def <init>($outer: TestArray#TestArray$SpecObject1$2.type, TestArray_this_arr1$2: Array[Boolean]): anonymous class anonfun$reverse_specialized1$mZc$sp$1 = {
      TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mZc$sp$1.this.TestArray_this_arr1$2 = TestArray_this_arr1$2;
      TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mZc$sp$1.super.<init>();
      ()
    }
  };
  final <synthetic> class TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mDc$sp$1 extends runtime.AbstractFunction1$mcVI$sp with Serializable {
    final def apply(i: Int): Unit = TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mDc$sp$1.this.apply$mcVI$sp(i);
    <specialized> def apply$mcVI$sp(i: Int): Unit = {
      val j: Int = TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mDc$sp$1.this.TestArray_this_arr1$3.length().-(i).-(1);
      val temp: Double = TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mDc$sp$1.this.TestArray_this_arr1$3.apply(j);
      TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mDc$sp$1.this.TestArray_this_arr1$3.update(j, TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mDc$sp$1.this.TestArray_this_arr1$3.apply(i));
      TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mDc$sp$1.this.TestArray_this_arr1$3.update(i, temp)
    };
    final <bridge> def apply(v1: Object): Object = {
      TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mDc$sp$1.this.apply(scala.Int.unbox(v1));
      scala.runtime.BoxedUnit.UNIT
    };
    <synthetic> <paramaccessor> private[this] val TestArray_this_arr1$3: Array[Double] = _;
    def <init>($outer: TestArray#TestArray$SpecObject1$2.type, TestArray_this_arr1$3: Array[Double]): anonymous class anonfun$reverse_specialized1$mDc$sp$1 = {
      TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mDc$sp$1.this.TestArray_this_arr1$3 = TestArray_this_arr1$3;
      TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mDc$sp$1.super.<init>();
      ()
    }
  };
  final <synthetic> class TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mIc$sp$1 extends runtime.AbstractFunction1$mcVI$sp with Serializable {
    final def apply(i: Int): Unit = TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mIc$sp$1.this.apply$mcVI$sp(i);
    <specialized> def apply$mcVI$sp(i: Int): Unit = {
      val j: Int = TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mIc$sp$1.this.TestArray_this_arr1$4.length().-(i).-(1);
      val temp: Int = TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mIc$sp$1.this.TestArray_this_arr1$4.apply(j);
      TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mIc$sp$1.this.TestArray_this_arr1$4.update(j, TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mIc$sp$1.this.TestArray_this_arr1$4.apply(i));
      TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mIc$sp$1.this.TestArray_this_arr1$4.update(i, temp)
    };
    final <bridge> def apply(v1: Object): Object = {
      TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mIc$sp$1.this.apply(scala.Int.unbox(v1));
      scala.runtime.BoxedUnit.UNIT
    };
    <synthetic> <paramaccessor> private[this] val TestArray_this_arr1$4: Array[Int] = _;
    def <init>($outer: TestArray#TestArray$SpecObject1$2.type, TestArray_this_arr1$4: Array[Int]): anonymous class anonfun$reverse_specialized1$mIc$sp$1 = {
      TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mIc$sp$1.this.TestArray_this_arr1$4 = TestArray_this_arr1$4;
      TestArray$SpecObject1$2$$anonfun$reverse_specialized1$mIc$sp$1.super.<init>();
      ()
    }
  };
  object TestArray$SpecObject1$2 extends Object {
    def reverse_specialized1(TestArray_this_arr1: Object): Unit = RichInt.this.to$extension0(scala.this.Predef.intWrapper(0), runtime.this.ScalaRunTime.array_length(TestArray_this_arr1)./(2)).foreach$mVc$sp({
      (new anonymous class anonfun$reverse_specialized1$1(TestArray$SpecObject1$2.this, TestArray_this_arr1): Function1)
    });
    <specialized> def reverse_specialized1$mZc$sp(TestArray_this_arr1: Array[Boolean]): Unit = RichInt.this.to$extension0(scala.this.Predef.intWrapper(0), TestArray_this_arr1.length()./(2)).foreach$mVc$sp({
      (new anonymous class anonfun$reverse_specialized1$mZc$sp$1(TestArray$SpecObject1$2.this, TestArray_this_arr1): Function1)
    });
    <specialized> def reverse_specialized1$mDc$sp(TestArray_this_arr1: Array[Double]): Unit = RichInt.this.to$extension0(scala.this.Predef.intWrapper(0), TestArray_this_arr1.length()./(2)).foreach$mVc$sp({
      (new anonymous class anonfun$reverse_specialized1$mDc$sp$1(TestArray$SpecObject1$2.this, TestArray_this_arr1): Function1)
    });
    <specialized> def reverse_specialized1$mIc$sp(TestArray_this_arr1: Array[Int]): Unit = RichInt.this.to$extension0(scala.this.Predef.intWrapper(0), TestArray_this_arr1.length()./(2)).foreach$mVc$sp({
      (new anonymous class anonfun$reverse_specialized1$mIc$sp$1(TestArray$SpecObject1$2.this, TestArray_this_arr1): Function1)
    });
    def <init>($outer: TestArray): TestArray#TestArray$SpecObject1$2.type = {
      TestArray$SpecObject1$2.super.<init>();
      ()
    }
  }
}