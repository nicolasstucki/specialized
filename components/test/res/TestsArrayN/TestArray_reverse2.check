newSource1.scala:7: warning: specialized[T] {...} does not support while loops
    specialized[T](Int, Double, Boolean) {
                                         ^
[[syntax trees at end of                     typer]] // newSource1.scala
package <empty> {
  import scala.reflect.ClassTag;
  import ch.epfl.lamp.specialized._;
  class TestArray[T >: Nothing <: Any] extends scala.AnyRef {
    <paramaccessor> private[this] val arr: Array[T] = _;
    implicit <paramaccessor> private[this] val classTag: scala.reflect.ClassTag[T] = _;
    def <init>(arr: Array[T])(implicit classTag: scala.reflect.ClassTag[T]): TestArray[T] = {
      TestArray.super.<init>();
      ()
    };
    def reverse2: Unit = {
      var i: Int = 0;
      while$1(){
        if (i.<(TestArray.this.arr.length./(2)))
          {
            {
              val j: Int = TestArray.this.arr.length.-(i).-(1);
              val temp: T = TestArray.this.arr.apply(j);
              TestArray.this.arr.update(j, TestArray.this.arr.apply(i));
              TestArray.this.arr.update(i, temp);
              i = i.+(1)
            };
            while$1()
          }
        else
          ()
      }
    }
  }
}

[[syntax trees at end of                       jvm]] // newSource1.scala
package <empty> {
  class TestArray extends Object {
    <paramaccessor> private[this] val arr: Object = _;
    def reverse2(): Unit = {
      var i: Int = 0;
      while$1(){
        if (i.<(runtime.this.ScalaRunTime.array_length(TestArray.this.arr)./(2)))
          {
            {
              val j: Int = runtime.this.ScalaRunTime.array_length(TestArray.this.arr).-(i).-(1);
              val temp: Object = runtime.this.ScalaRunTime.array_apply(TestArray.this.arr, j);
              runtime.this.ScalaRunTime.array_update(TestArray.this.arr, j, runtime.this.ScalaRunTime.array_apply(TestArray.this.arr, i));
              runtime.this.ScalaRunTime.array_update(TestArray.this.arr, i, temp);
              i = i.+(1)
            };
            while$1()
          }
        else
          ()
      }
    };
    def <init>(arr: Object, classTag: reflect.ClassTag): TestArray = {
      TestArray.this.arr = arr;
      TestArray.super.<init>();
      ()
    }
  }
}