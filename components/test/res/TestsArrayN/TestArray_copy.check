[[syntax trees at end of                     typer]] // newSource1.scala
package <empty> {
  import scala.reflect.ClassTag;
  import ch.epfl.lamp.specialized._;
  class TestArray[T >: Nothing <: Any] extends scala.AnyRef {
    <paramaccessor> private[this] val arrA: Array[T] = _;
    implicit <paramaccessor> private[this] val classTag: scala.reflect.ClassTag[T] = _;
    def <init>(arrA: Array[T])(implicit classTag: scala.reflect.ClassTag[T]): TestArray[T] = {
      TestArray.super.<init>();
      ()
    };
    def copy: Unit = {
      val arrB: Array[T] = TestArray.this.classTag.newArray(TestArray.this.arrA.length);
      {
        object SpecObject1 extends scala.AnyRef {
          def <init>(): SpecObject1.type = {
            SpecObject1.super.<init>();
            ()
          };
          def copy_specialized1[@specialized(scala.Boolean, scala.Double, scala.Int) T >: Nothing <: Any](TestArray_this_arrA1: Array[T], arrB: Array[T]): Unit = scala.this.Predef.intWrapper(0).until(TestArray_this_arrA1.length).foreach[Unit](((i: Int) => arrB.update(i, TestArray_this_arrA1.apply(i))))
        };
        import SpecObject1._;
        import scala.reflect.ManifestFactory;
        if (TestArray.this.classTag.==(scala.reflect.ManifestFactory.Boolean))
          SpecObject1.copy_specialized1[Boolean](TestArray.this.arrA.asInstanceOf[Array[Boolean]], arrB.asInstanceOf[Array[Boolean]])
        else
          if (TestArray.this.classTag.==(scala.reflect.ManifestFactory.Double))
            SpecObject1.copy_specialized1[Double](TestArray.this.arrA.asInstanceOf[Array[Double]], arrB.asInstanceOf[Array[Double]])
          else
            if (TestArray.this.classTag.==(scala.reflect.ManifestFactory.Int))
              SpecObject1.copy_specialized1[Int](TestArray.this.arrA.asInstanceOf[Array[Int]], arrB.asInstanceOf[Array[Int]])
            else
              SpecObject1.copy_specialized1[T](TestArray.this.arrA, arrB)
      }
    }
  }
}

[[syntax trees at end of                       jvm]] // newSource1.scala
package <empty> {
  class TestArray extends Object {
    private def SpecObject1$1$lzycompute(x$1: runtime.VolatileObjectRef): TestArray#TestArray$SpecObject1$2.type = {
      {
        TestArray.this.synchronized({
          if (x$1.elem.eq(null))
            {
              x$1.elem = new TestArray#TestArray$SpecObject1$2.type(TestArray.this);
              ()
            };
          scala.runtime.BoxedUnit.UNIT
        });
        null
      };
      x$1.elem.$asInstanceOf[TestArray#TestArray$SpecObject1$2.type]()
    };
    <paramaccessor> private[this] val arrA: Object = _;
    implicit <paramaccessor> private[this] val classTag: reflect.ClassTag = _;
    def copy(): Unit = {
      val arrB: Object = TestArray.this.classTag.newArray(runtime.this.ScalaRunTime.array_length(TestArray.this.arrA));
      {
        @volatile var SpecObject1$module: runtime.VolatileObjectRef = new runtime.VolatileObjectRef(null);
        if (TestArray.this.classTag.==(scala.reflect.ManifestFactory.Boolean()))
          TestArray.this.SpecObject1$1(SpecObject1$module).copy_specialized1$mZc$sp(TestArray.this.arrA.$asInstanceOf[Array[Boolean]](), arrB.$asInstanceOf[Array[Boolean]]())
        else
          if (TestArray.this.classTag.==(scala.reflect.ManifestFactory.Double()))
            TestArray.this.SpecObject1$1(SpecObject1$module).copy_specialized1$mDc$sp(TestArray.this.arrA.$asInstanceOf[Array[Double]](), arrB.$asInstanceOf[Array[Double]]())
          else
            if (TestArray.this.classTag.==(scala.reflect.ManifestFactory.Int()))
              TestArray.this.SpecObject1$1(SpecObject1$module).copy_specialized1$mIc$sp(TestArray.this.arrA.$asInstanceOf[Array[Int]](), arrB.$asInstanceOf[Array[Int]]())
            else
              TestArray.this.SpecObject1$1(SpecObject1$module).copy_specialized1(TestArray.this.arrA, arrB)
      }
    };
    final <stable> private[this] def SpecObject1$1(SpecObject1$module$1: runtime.VolatileObjectRef): TestArray#TestArray$SpecObject1$2.type = if (SpecObject1$module$1.elem.eq(null))
      TestArray.this.SpecObject1$1$lzycompute(SpecObject1$module$1)
    else
      SpecObject1$module$1.elem.$asInstanceOf[TestArray#TestArray$SpecObject1$2.type]();
    def <init>(arrA: Object, classTag: reflect.ClassTag): TestArray = {
      TestArray.this.arrA = arrA;
      TestArray.this.classTag = classTag;
      TestArray.super.<init>();
      ()
    }
  };
  @SerialVersionUID(0) final <synthetic> class TestArray$SpecObject1$2$$anonfun$copy_specialized1$1 extends runtime.AbstractFunction1$mcVI$sp with Serializable {
    final def apply(i: Int): Unit = TestArray$SpecObject1$2$$anonfun$copy_specialized1$1.this.apply$mcVI$sp(i);
    <specialized> def apply$mcVI$sp(i: Int): Unit = runtime.this.ScalaRunTime.array_update(TestArray$SpecObject1$2$$anonfun$copy_specialized1$1.this.arrB$1, i, runtime.this.ScalaRunTime.array_apply(TestArray$SpecObject1$2$$anonfun$copy_specialized1$1.this.TestArray_this_arrA1$1, i));
    final <bridge> def apply(v1: Object): Object = {
      TestArray$SpecObject1$2$$anonfun$copy_specialized1$1.this.apply(scala.Int.unbox(v1));
      scala.runtime.BoxedUnit.UNIT
    };
    <synthetic> <paramaccessor> private[this] val TestArray_this_arrA1$1: Object = _;
    <synthetic> <paramaccessor> private[this] val arrB$1: Object = _;
    def <init>($outer: TestArray#TestArray$SpecObject1$2.type, TestArray_this_arrA1$1: Object, arrB$1: Object): anonymous class anonfun$copy_specialized1$1 = {
      TestArray$SpecObject1$2$$anonfun$copy_specialized1$1.this.TestArray_this_arrA1$1 = TestArray_this_arrA1$1;
      TestArray$SpecObject1$2$$anonfun$copy_specialized1$1.this.arrB$1 = arrB$1;
      TestArray$SpecObject1$2$$anonfun$copy_specialized1$1.super.<init>();
      ()
    }
  };
  final <synthetic> class TestArray$SpecObject1$2$$anonfun$copy_specialized1$mZc$sp$1 extends runtime.AbstractFunction1 with Serializable {
    final def apply(i: Int): Unit = TestArray$SpecObject1$2$$anonfun$copy_specialized1$mZc$sp$1.this.arrB$2.update(i, TestArray$SpecObject1$2$$anonfun$copy_specialized1$mZc$sp$1.this.TestArray_this_arrA1$2.apply(i));
    final <bridge> def apply(v1: Object): Object = {
      TestArray$SpecObject1$2$$anonfun$copy_specialized1$mZc$sp$1.this.apply(scala.Int.unbox(v1));
      scala.runtime.BoxedUnit.UNIT
    };
    <synthetic> <paramaccessor> private[this] val TestArray_this_arrA1$2: Array[Boolean] = _;
    <synthetic> <paramaccessor> private[this] val arrB$2: Array[Boolean] = _;
    def <init>($outer: TestArray#TestArray$SpecObject1$2.type, TestArray_this_arrA1$2: Array[Boolean], arrB$2: Array[Boolean]): anonymous class anonfun$copy_specialized1$mZc$sp$1 = {
      TestArray$SpecObject1$2$$anonfun$copy_specialized1$mZc$sp$1.this.TestArray_this_arrA1$2 = TestArray_this_arrA1$2;
      TestArray$SpecObject1$2$$anonfun$copy_specialized1$mZc$sp$1.this.arrB$2 = arrB$2;
      TestArray$SpecObject1$2$$anonfun$copy_specialized1$mZc$sp$1.super.<init>();
      ()
    }
  };
  final <synthetic> class TestArray$SpecObject1$2$$anonfun$copy_specialized1$mDc$sp$1 extends runtime.AbstractFunction1 with Serializable {
    final def apply(i: Int): Unit = TestArray$SpecObject1$2$$anonfun$copy_specialized1$mDc$sp$1.this.arrB$3.update(i, TestArray$SpecObject1$2$$anonfun$copy_specialized1$mDc$sp$1.this.TestArray_this_arrA1$3.apply(i));
    final <bridge> def apply(v1: Object): Object = {
      TestArray$SpecObject1$2$$anonfun$copy_specialized1$mDc$sp$1.this.apply(scala.Int.unbox(v1));
      scala.runtime.BoxedUnit.UNIT
    };
    <synthetic> <paramaccessor> private[this] val TestArray_this_arrA1$3: Array[Double] = _;
    <synthetic> <paramaccessor> private[this] val arrB$3: Array[Double] = _;
    def <init>($outer: TestArray#TestArray$SpecObject1$2.type, TestArray_this_arrA1$3: Array[Double], arrB$3: Array[Double]): anonymous class anonfun$copy_specialized1$mDc$sp$1 = {
      TestArray$SpecObject1$2$$anonfun$copy_specialized1$mDc$sp$1.this.TestArray_this_arrA1$3 = TestArray_this_arrA1$3;
      TestArray$SpecObject1$2$$anonfun$copy_specialized1$mDc$sp$1.this.arrB$3 = arrB$3;
      TestArray$SpecObject1$2$$anonfun$copy_specialized1$mDc$sp$1.super.<init>();
      ()
    }
  };
  final <synthetic> class TestArray$SpecObject1$2$$anonfun$copy_specialized1$mIc$sp$1 extends runtime.AbstractFunction1 with Serializable {
    final def apply(i: Int): Unit = TestArray$SpecObject1$2$$anonfun$copy_specialized1$mIc$sp$1.this.arrB$4.update(i, TestArray$SpecObject1$2$$anonfun$copy_specialized1$mIc$sp$1.this.TestArray_this_arrA1$4.apply(i));
    final <bridge> def apply(v1: Object): Object = {
      TestArray$SpecObject1$2$$anonfun$copy_specialized1$mIc$sp$1.this.apply(scala.Int.unbox(v1));
      scala.runtime.BoxedUnit.UNIT
    };
    <synthetic> <paramaccessor> private[this] val TestArray_this_arrA1$4: Array[Int] = _;
    <synthetic> <paramaccessor> private[this] val arrB$4: Array[Int] = _;
    def <init>($outer: TestArray#TestArray$SpecObject1$2.type, TestArray_this_arrA1$4: Array[Int], arrB$4: Array[Int]): anonymous class anonfun$copy_specialized1$mIc$sp$1 = {
      TestArray$SpecObject1$2$$anonfun$copy_specialized1$mIc$sp$1.this.TestArray_this_arrA1$4 = TestArray_this_arrA1$4;
      TestArray$SpecObject1$2$$anonfun$copy_specialized1$mIc$sp$1.this.arrB$4 = arrB$4;
      TestArray$SpecObject1$2$$anonfun$copy_specialized1$mIc$sp$1.super.<init>();
      ()
    }
  };
  object TestArray$SpecObject1$2 extends Object {
    def copy_specialized1(TestArray_this_arrA1: Object, arrB: Object): Unit = RichInt.this.until$extension0(scala.this.Predef.intWrapper(0), runtime.this.ScalaRunTime.array_length(TestArray_this_arrA1)).foreach$mVc$sp({
      (new anonymous class anonfun$copy_specialized1$1(TestArray$SpecObject1$2.this, TestArray_this_arrA1, arrB): Function1)
    });
    <specialized> def copy_specialized1$mZc$sp(TestArray_this_arrA1: Array[Boolean], arrB: Array[Boolean]): Unit = RichInt.this.until$extension0(scala.this.Predef.intWrapper(0), TestArray_this_arrA1.length()).foreach$mVc$sp({
      (new anonymous class anonfun$copy_specialized1$mZc$sp$1(TestArray$SpecObject1$2.this, TestArray_this_arrA1, arrB): Function1)
    });
    <specialized> def copy_specialized1$mDc$sp(TestArray_this_arrA1: Array[Double], arrB: Array[Double]): Unit = RichInt.this.until$extension0(scala.this.Predef.intWrapper(0), TestArray_this_arrA1.length()).foreach$mVc$sp({
      (new anonymous class anonfun$copy_specialized1$mDc$sp$1(TestArray$SpecObject1$2.this, TestArray_this_arrA1, arrB): Function1)
    });
    <specialized> def copy_specialized1$mIc$sp(TestArray_this_arrA1: Array[Int], arrB: Array[Int]): Unit = RichInt.this.until$extension0(scala.this.Predef.intWrapper(0), TestArray_this_arrA1.length()).foreach$mVc$sp({
      (new anonymous class anonfun$copy_specialized1$mIc$sp$1(TestArray$SpecObject1$2.this, TestArray_this_arrA1, arrB): Function1)
    });
    def <init>($outer: TestArray): TestArray#TestArray$SpecObject1$2.type = {
      TestArray$SpecObject1$2.super.<init>();
      ()
    }
  }
}