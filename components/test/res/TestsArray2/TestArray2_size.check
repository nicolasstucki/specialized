[[syntax trees at end of                     typer]] // newSource1
package <empty> {
  import scala.reflect.ClassTag;
  import ch.epfl.lamp.specialized._;
  class TestArray2Reverse[T >: Nothing <: Any] extends scala.AnyRef {
    implicit <paramaccessor> private[this] val classTag: scala.reflect.ClassTag[T] = _;
    def <init>()(implicit classTag: scala.reflect.ClassTag[T]): TestArray2Reverse[T] = {
      TestArray2Reverse.super.<init>();
      ()
    };
    private[this] val arr: Array[T] = TestArray2Reverse.this.classTag.newArray(2);
    <stable> <accessor> def arr: Array[T] = TestArray2Reverse.this.arr;
    private[this] val arrB: Array[T] = TestArray2Reverse.this.classTag.newArray(scala.this.Predef.genericArrayOps[T](TestArray2Reverse.this.arr).size);
    <stable> <accessor> def arrB: Array[T] = TestArray2Reverse.this.arrB;
    def size: Int = {
      def size_spec_Generic1(): Int = scala.this.Predef.genericArrayOps[T](TestArray2Reverse.this.arr).size;
      def size_spec_Boolean1(TestArray2Reverse_this_arr1: Array[Boolean]): Int = scala.this.Predef.genericArrayOps[Boolean](TestArray2Reverse_this_arr1).size;
      def size_spec_Double1(TestArray2Reverse_this_arr1: Array[Double]): Int = scala.this.Predef.genericArrayOps[Double](TestArray2Reverse_this_arr1).size;
      def size_spec_Int1(TestArray2Reverse_this_arr1: Array[Int]): Int = scala.this.Predef.genericArrayOps[Int](TestArray2Reverse_this_arr1).size;
      if (TestArray2Reverse.this.classTag.==(ManifestFactory.Boolean))
  size_spec_Boolean1(TestArray2Reverse.this.arr.asInstanceOf[Array[Boolean]])
else
  if (TestArray2Reverse.this.classTag.==(ManifestFactory.Double))
    size_spec_Double1(TestArray2Reverse.this.arr.asInstanceOf[Array[Double]])
  else
    if (TestArray2Reverse.this.classTag.==(ManifestFactory.Int))
      size_spec_Int1(TestArray2Reverse.this.arr.asInstanceOf[Array[Int]])
    else
      size_spec_Generic1().asInstanceOf[Int]
    }
  }
}

[[syntax trees at end of                       jvm]] // newSource1
package <empty> {
  class TestArray2Reverse extends Object {
    implicit <paramaccessor> private[this] val classTag: reflect.ClassTag = _;
    private[this] val arr: Object = _;
    <stable> <accessor> def arr(): Object = TestArray2Reverse.this.arr;
    private[this] val arrB: Object = _;
    <stable> <accessor> def arrB(): Object = TestArray2Reverse.this.arrB;
    def size(): Int = (if (TestArray2Reverse.this.classTag.==(ManifestFactory.Boolean()))
      TestArray2Reverse.this.size_spec_Boolean1$1(TestArray2Reverse.this.arr().$asInstanceOf[Array[Boolean]]())
    else
      if (TestArray2Reverse.this.classTag.==(ManifestFactory.Double()))
        TestArray2Reverse.this.size_spec_Double1$1(TestArray2Reverse.this.arr().$asInstanceOf[Array[Double]]())
      else
        if (TestArray2Reverse.this.classTag.==(ManifestFactory.Int()))
          TestArray2Reverse.this.size_spec_Int1$1(TestArray2Reverse.this.arr().$asInstanceOf[Array[Int]]())
        else
          TestArray2Reverse.this.size_spec_Generic1$1(): Int);
    final private[this] def size_spec_Generic1$1(): Int = scala.this.Predef.genericArrayOps(TestArray2Reverse.this.arr()).size();
    final private[this] def size_spec_Boolean1$1(TestArray2Reverse_this_arr1: Array[Boolean]): Int = scala.this.Predef.genericArrayOps(TestArray2Reverse_this_arr1).size();
    final private[this] def size_spec_Double1$1(TestArray2Reverse_this_arr1: Array[Double]): Int = scala.this.Predef.genericArrayOps(TestArray2Reverse_this_arr1).size();
    final private[this] def size_spec_Int1$1(TestArray2Reverse_this_arr1: Array[Int]): Int = scala.this.Predef.genericArrayOps(TestArray2Reverse_this_arr1).size();
    def <init>(implicit classTag: reflect.ClassTag): TestArray2Reverse = {
      TestArray2Reverse.this.classTag = classTag;
      TestArray2Reverse.super.<init>();
      TestArray2Reverse.this.arr = classTag.newArray(2);
      TestArray2Reverse.this.arrB = classTag.newArray(scala.this.Predef.genericArrayOps(TestArray2Reverse.this.arr()).size());
      ()
    }
  }
}