[[syntax trees at end of                     typer]] // newSource1.scala
package <empty> {
  import scala.reflect.ClassTag;
  import ch.epfl.lamp.specialized._;
  class TestArray2Reverse[T >: Nothing <: Any] extends scala.AnyRef {
    implicit <paramaccessor> private[this] val classTag: scala.reflect.ClassTag[T] = _;
    def <init>()(implicit classTag: scala.reflect.ClassTag[T]): TestArray2Reverse[T] = {
      TestArray2Reverse.super.<init>();
      ()
    };
    private[this] val arr: Array[T] = TestArray2Reverse.this.classTag.newArray(2);
    <stable> <accessor> def arr: Array[T] = TestArray2Reverse.this.arr;
    private[this] val arrB: Array[T] = TestArray2Reverse.this.classTag.newArray(scala.this.Predef.genericArrayOps[T](TestArray2Reverse.this.arr).size);
    <stable> <accessor> def arrB: Array[T] = TestArray2Reverse.this.arrB;
    def length: Int = {
      object SpecObject1 extends scala.AnyRef {
        def <init>(): SpecObject1.type = {
          SpecObject1.super.<init>();
          ()
        };
        def length_specialized1[@specialized(scala.Boolean, scala.Double, scala.Int) T >: Nothing <: Any](TestArray2Reverse_this_arr1: Array[T]): Int = TestArray2Reverse_this_arr1.length
      };
      import SpecObject1._;
      import scala.reflect.ManifestFactory;
      if (TestArray2Reverse.this.classTag.==(scala.reflect.ManifestFactory.Boolean))
        SpecObject1.length_specialized1[Boolean](TestArray2Reverse.this.arr.asInstanceOf[Array[Boolean]])
      else
        if (TestArray2Reverse.this.classTag.==(scala.reflect.ManifestFactory.Double))
          SpecObject1.length_specialized1[Double](TestArray2Reverse.this.arr.asInstanceOf[Array[Double]])
        else
          if (TestArray2Reverse.this.classTag.==(scala.reflect.ManifestFactory.Int))
            SpecObject1.length_specialized1[Int](TestArray2Reverse.this.arr.asInstanceOf[Array[Int]])
          else
            SpecObject1.length_specialized1[T](TestArray2Reverse.this.arr)
    }
  }
}

[[syntax trees at end of                       jvm]] // newSource1.scala
package <empty> {
  class TestArray2Reverse extends Object {
    private def SpecObject1$1$lzycompute(x$1: runtime.VolatileObjectRef): TestArray2Reverse#TestArray2Reverse$SpecObject1$2.type = {
      {
        TestArray2Reverse.this.synchronized({
          if (x$1.elem.eq(null))
            {
              x$1.elem = new TestArray2Reverse#TestArray2Reverse$SpecObject1$2.type(TestArray2Reverse.this);
              ()
            };
          scala.runtime.BoxedUnit.UNIT
        });
        null
      };
      x$1.elem.$asInstanceOf[TestArray2Reverse#TestArray2Reverse$SpecObject1$2.type]()
    };
    implicit <paramaccessor> private[this] val classTag: reflect.ClassTag = _;
    private[this] val arr: Object = _;
    <stable> <accessor> def arr(): Object = TestArray2Reverse.this.arr;
    private[this] val arrB: Object = _;
    <stable> <accessor> def arrB(): Object = TestArray2Reverse.this.arrB;
    def length(): Int = {
      @volatile var SpecObject1$module: runtime.VolatileObjectRef = new runtime.VolatileObjectRef(null);
      if (TestArray2Reverse.this.classTag.==(scala.reflect.ManifestFactory.Boolean()))
        TestArray2Reverse.this.SpecObject1$1(SpecObject1$module).length_specialized1$mZc$sp(TestArray2Reverse.this.arr().$asInstanceOf[Array[Boolean]]())
      else
        if (TestArray2Reverse.this.classTag.==(scala.reflect.ManifestFactory.Double()))
          TestArray2Reverse.this.SpecObject1$1(SpecObject1$module).length_specialized1$mDc$sp(TestArray2Reverse.this.arr().$asInstanceOf[Array[Double]]())
        else
          if (TestArray2Reverse.this.classTag.==(scala.reflect.ManifestFactory.Int()))
            TestArray2Reverse.this.SpecObject1$1(SpecObject1$module).length_specialized1$mIc$sp(TestArray2Reverse.this.arr().$asInstanceOf[Array[Int]]())
          else
            TestArray2Reverse.this.SpecObject1$1(SpecObject1$module).length_specialized1(TestArray2Reverse.this.arr())
    };
    final <stable> private[this] def SpecObject1$1(SpecObject1$module$1: runtime.VolatileObjectRef): TestArray2Reverse#TestArray2Reverse$SpecObject1$2.type = if (SpecObject1$module$1.elem.eq(null))
      TestArray2Reverse.this.SpecObject1$1$lzycompute(SpecObject1$module$1)
    else
      SpecObject1$module$1.elem.$asInstanceOf[TestArray2Reverse#TestArray2Reverse$SpecObject1$2.type]();
    def <init>(implicit classTag: reflect.ClassTag): TestArray2Reverse = {
      TestArray2Reverse.this.classTag = classTag;
      TestArray2Reverse.super.<init>();
      TestArray2Reverse.this.arr = classTag.newArray(2);
      TestArray2Reverse.this.arrB = classTag.newArray(scala.this.Predef.genericArrayOps(TestArray2Reverse.this.arr()).size());
      ()
    }
  };
  object TestArray2Reverse$SpecObject1$2 extends Object {
    def length_specialized1(TestArray2Reverse_this_arr1: Object): Int = runtime.this.ScalaRunTime.array_length(TestArray2Reverse_this_arr1);
    <specialized> def length_specialized1$mZc$sp(TestArray2Reverse_this_arr1: Array[Boolean]): Int = TestArray2Reverse_this_arr1.length();
    <specialized> def length_specialized1$mDc$sp(TestArray2Reverse_this_arr1: Array[Double]): Int = TestArray2Reverse_this_arr1.length();
    <specialized> def length_specialized1$mIc$sp(TestArray2Reverse_this_arr1: Array[Int]): Int = TestArray2Reverse_this_arr1.length();
    def <init>($outer: TestArray2Reverse): TestArray2Reverse#TestArray2Reverse$SpecObject1$2.type = {
      TestArray2Reverse$SpecObject1$2.super.<init>();
      ()
    }
  }
}

