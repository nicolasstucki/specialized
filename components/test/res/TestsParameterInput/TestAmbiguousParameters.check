newSource1:8: error: ambiguous implicit values:
 both value evidence$2 in class C of type scala.reflect.ClassTag[U]
 and value evidence$1 in class C of type scala.reflect.ClassTag[T]
 match expected type scala.reflect.ClassTag[T]
      specialized {
                  ^
[[syntax trees at end of                     typer]] // newSource1
package <empty> {
  import ch.epfl.lamp.specialized._;
  import scala.reflect.ClassTag;
  class C[T >: Nothing <: Any, U >: Nothing <: Any] extends scala.AnyRef {
    implicit <synthetic> <paramaccessor> private[this] val evidence$1: scala.reflect.ClassTag[T] = _;
    implicit <synthetic> <paramaccessor> private[this] val evidence$2: scala.reflect.ClassTag[U] = _;
    def <init>()(implicit evidence$1: scala.reflect.ClassTag[T], evidence$2: scala.reflect.ClassTag[U]): C[T,U] = {
      C.super.<init>();
      ()
    };
    def m(): <error> = ch.epfl.lamp.specialized.`package`.specialized[T](scala.Unit)()
  }
}