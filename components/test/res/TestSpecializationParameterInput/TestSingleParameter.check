[[syntax trees at end of                     typer]] // newSource1
package <empty> {
  import ch.epfl.lamp.specialized._;
  import scala.reflect.ClassTag;
  class C[T >: Nothing <: Any] extends scala.AnyRef {
    implicit <synthetic> <paramaccessor> private[this] val evidence$1: scala.reflect.ClassTag[T] = _;
    def <init>()(implicit evidence$1: scala.reflect.ClassTag[T]): C[T] = {
      C.super.<init>();
      ()
    };
    def mBoolean(): Unit = {
      def mBoolean_spec_Generic1(): Unit = scala.this.Predef.println();
      def mBoolean_spec_Boolean1(): Unit = scala.this.Predef.println();
      if (C.this.evidence$1.==(ManifestFactory.Boolean))
  mBoolean_spec_Boolean1()
else
  mBoolean_spec_Generic1().asInstanceOf[Unit]
    };
    def mByte(): Unit = {
      def mByte_spec_Generic1(): Unit = scala.this.Predef.println();
      def mByte_spec_Byte1(): Unit = scala.this.Predef.println();
      if (C.this.evidence$1.==(ManifestFactory.Byte))
  mByte_spec_Byte1()
else
  mByte_spec_Generic1().asInstanceOf[Unit]
    };
    def mChar(): Unit = {
      def mChar_spec_Generic1(): Unit = scala.this.Predef.println();
      def mChar_spec_Char1(): Unit = scala.this.Predef.println();
      if (C.this.evidence$1.==(ManifestFactory.Char))
  mChar_spec_Char1()
else
  mChar_spec_Generic1().asInstanceOf[Unit]
    };
    def mDouble(): Unit = {
      def mDouble_spec_Generic1(): Unit = scala.this.Predef.println();
      def mDouble_spec_Double1(): Unit = scala.this.Predef.println();
      if (C.this.evidence$1.==(ManifestFactory.Double))
  mDouble_spec_Double1()
else
  mDouble_spec_Generic1().asInstanceOf[Unit]
    };
    def mFloat(): Unit = {
      def mFloat_spec_Generic1(): Unit = scala.this.Predef.println();
      def mFloat_spec_Float1(): Unit = scala.this.Predef.println();
      if (C.this.evidence$1.==(ManifestFactory.Float))
  mFloat_spec_Float1()
else
  mFloat_spec_Generic1().asInstanceOf[Unit]
    };
    def mInt(): Unit = {
      def mInt_spec_Generic1(): Unit = scala.this.Predef.println();
      def mInt_spec_Int1(): Unit = scala.this.Predef.println();
      if (C.this.evidence$1.==(ManifestFactory.Int))
  mInt_spec_Int1()
else
  mInt_spec_Generic1().asInstanceOf[Unit]
    };
    def mLong(): Unit = {
      def mLong_spec_Generic1(): Unit = scala.this.Predef.println();
      def mLong_spec_Long1(): Unit = scala.this.Predef.println();
      if (C.this.evidence$1.==(ManifestFactory.Long))
  mLong_spec_Long1()
else
  mLong_spec_Generic1().asInstanceOf[Unit]
    };
    def mShort(): Unit = {
      def mShort_spec_Generic1(): Unit = scala.this.Predef.println();
      def mShort_spec_Short1(): Unit = scala.this.Predef.println();
      if (C.this.evidence$1.==(ManifestFactory.Short))
  mShort_spec_Short1()
else
  mShort_spec_Generic1().asInstanceOf[Unit]
    };
    def mUnit(): Unit = {
      def mUnit_spec_Generic1(): Unit = scala.this.Predef.println();
      def mUnit_spec_Unit1(): Unit = scala.this.Predef.println();
      if (C.this.evidence$1.==(ManifestFactory.Unit))
  mUnit_spec_Unit1()
else
  mUnit_spec_Generic1().asInstanceOf[Unit]
    }
  }
}