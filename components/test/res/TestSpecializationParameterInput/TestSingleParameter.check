[[syntax trees at end of                     typer]] // newSource1.scala
package <empty> {
  import ch.epfl.lamp.specialized._;
  import scala.reflect.ClassTag;
  class C[T >: Nothing <: Any] extends scala.AnyRef {
    <paramaccessor> private[this] val dummy: T = _;
    <stable> <accessor> <paramaccessor> def dummy: T = C.this.dummy;
    implicit <synthetic> <paramaccessor> private[this] val evidence$1: scala.reflect.ClassTag[T] = _;
    def <init>(dummy: T)(implicit evidence$1: scala.reflect.ClassTag[T]): C[T] = {
      C.super.<init>();
      ()
    };
    def mBoolean(): T = {
  object SpecObject1 extends scala.AnyRef {
    def <init>(): SpecObject1.type = {
      SpecObject1.super.<init>();
      ()
    };
    def mBoolean_specialized1[@specialized(scala.Boolean) T >: Nothing <: Any](C_this_dummy1: T): T = C_this_dummy1
  };
  import SpecObject1._;
  import scala.reflect.ManifestFactory;
  if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Boolean))
    SpecObject1.mBoolean_specialized1[Boolean](C.this.dummy.asInstanceOf[Boolean])
  else
    SpecObject1.mBoolean_specialized1[T](C.this.dummy)
}.asInstanceOf[T];
    def mByte(): T = {
  object SpecObject2 extends scala.AnyRef {
    def <init>(): SpecObject2.type = {
      SpecObject2.super.<init>();
      ()
    };
    def mByte_specialized1[@specialized(scala.Byte) T >: Nothing <: Any](C_this_dummy2: T): T = C_this_dummy2
  };
  import SpecObject2._;
  import scala.reflect.ManifestFactory;
  if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Byte))
    SpecObject2.mByte_specialized1[Byte](C.this.dummy.asInstanceOf[Byte])
  else
    SpecObject2.mByte_specialized1[T](C.this.dummy)
}.asInstanceOf[T];
    def mChar(): T = {
  object SpecObject3 extends scala.AnyRef {
    def <init>(): SpecObject3.type = {
      SpecObject3.super.<init>();
      ()
    };
    def mChar_specialized1[@specialized(scala.Char) T >: Nothing <: Any](C_this_dummy3: T): T = C_this_dummy3
  };
  import SpecObject3._;
  import scala.reflect.ManifestFactory;
  if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Char))
    SpecObject3.mChar_specialized1[Char](C.this.dummy.asInstanceOf[Char])
  else
    SpecObject3.mChar_specialized1[T](C.this.dummy)
}.asInstanceOf[T];
    def mDouble(): T = {
  object SpecObject4 extends scala.AnyRef {
    def <init>(): SpecObject4.type = {
      SpecObject4.super.<init>();
      ()
    };
    def mDouble_specialized1[@specialized(scala.Double) T >: Nothing <: Any](C_this_dummy4: T): T = C_this_dummy4
  };
  import SpecObject4._;
  import scala.reflect.ManifestFactory;
  if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Double))
    SpecObject4.mDouble_specialized1[Double](C.this.dummy.asInstanceOf[Double])
  else
    SpecObject4.mDouble_specialized1[T](C.this.dummy)
}.asInstanceOf[T];
    def mFloat(): T = {
  object SpecObject5 extends scala.AnyRef {
    def <init>(): SpecObject5.type = {
      SpecObject5.super.<init>();
      ()
    };
    def mFloat_specialized1[@specialized(scala.Float) T >: Nothing <: Any](C_this_dummy5: T): T = C_this_dummy5
  };
  import SpecObject5._;
  import scala.reflect.ManifestFactory;
  if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Float))
    SpecObject5.mFloat_specialized1[Float](C.this.dummy.asInstanceOf[Float])
  else
    SpecObject5.mFloat_specialized1[T](C.this.dummy)
}.asInstanceOf[T];
    def mInt(): T = {
  object SpecObject6 extends scala.AnyRef {
    def <init>(): SpecObject6.type = {
      SpecObject6.super.<init>();
      ()
    };
    def mInt_specialized1[@specialized(scala.Int) T >: Nothing <: Any](C_this_dummy6: T): T = C_this_dummy6
  };
  import SpecObject6._;
  import scala.reflect.ManifestFactory;
  if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Int))
    SpecObject6.mInt_specialized1[Int](C.this.dummy.asInstanceOf[Int])
  else
    SpecObject6.mInt_specialized1[T](C.this.dummy)
}.asInstanceOf[T];
    def mLong(): T = {
  object SpecObject7 extends scala.AnyRef {
    def <init>(): SpecObject7.type = {
      SpecObject7.super.<init>();
      ()
    };
    def mLong_specialized1[@specialized(scala.Long) T >: Nothing <: Any](C_this_dummy7: T): T = C_this_dummy7
  };
  import SpecObject7._;
  import scala.reflect.ManifestFactory;
  if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Long))
    SpecObject7.mLong_specialized1[Long](C.this.dummy.asInstanceOf[Long])
  else
    SpecObject7.mLong_specialized1[T](C.this.dummy)
}.asInstanceOf[T];
    def mShort(): T = {
  object SpecObject8 extends scala.AnyRef {
    def <init>(): SpecObject8.type = {
      SpecObject8.super.<init>();
      ()
    };
    def mShort_specialized1[@specialized(scala.Short) T >: Nothing <: Any](C_this_dummy8: T): T = C_this_dummy8
  };
  import SpecObject8._;
  import scala.reflect.ManifestFactory;
  if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Short))
    SpecObject8.mShort_specialized1[Short](C.this.dummy.asInstanceOf[Short])
  else
    SpecObject8.mShort_specialized1[T](C.this.dummy)
}.asInstanceOf[T];
    def mUnit(): T = {
  object SpecObject9 extends scala.AnyRef {
    def <init>(): SpecObject9.type = {
      SpecObject9.super.<init>();
      ()
    };
    def mUnit_specialized1[@specialized(scala.Unit) T >: Nothing <: Any](C_this_dummy9: T): T = C_this_dummy9
  };
  import SpecObject9._;
  import scala.reflect.ManifestFactory;
  if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Unit))
    SpecObject9.mUnit_specialized1[Unit](C.this.dummy.asInstanceOf[Unit])
  else
    SpecObject9.mUnit_specialized1[T](C.this.dummy)
}.asInstanceOf[T]
  }
}