[[syntax trees at end of                     typer]] // newSource1.scala
package <empty> {
  import ch.epfl.lamp.specialized._;
  import scala.reflect.ClassTag;
  class C[T >: Nothing <: Any] extends scala.AnyRef {
    <paramaccessor> private[this] val dummy: T = _;
    <stable> <accessor> <paramaccessor> def dummy: T = C.this.dummy;
    implicit <synthetic> <paramaccessor> private[this] val evidence$1: scala.reflect.ClassTag[T] = _;
    def <init>(dummy: T)(implicit evidence$1: scala.reflect.ClassTag[T]): C[T] = {
      C.super.<init>();
      ()
    };
    def mPrimitives(): T = {
  object SpecObject1 extends scala.AnyRef {
    def <init>(): SpecObject1.type = {
      SpecObject1.super.<init>();
      ()
    };
    def mPrimitives_specialized1[@specialized(scala.Boolean, scala.Double, scala.Short, scala.Long, scala.Float, scala.Int, scala.Char, scala.Byte, scala.Unit) T >: Nothing <: Any](C_this_dummy1: T): T = C_this_dummy1
  };
  import SpecObject1._;
  import scala.reflect.ManifestFactory;
  if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Boolean))
    SpecObject1.mPrimitives_specialized1[Boolean](C.this.dummy.asInstanceOf[Boolean])
  else
    if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Byte))
      SpecObject1.mPrimitives_specialized1[Byte](C.this.dummy.asInstanceOf[Byte])
    else
      if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Char))
        SpecObject1.mPrimitives_specialized1[Char](C.this.dummy.asInstanceOf[Char])
      else
        if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Double))
          SpecObject1.mPrimitives_specialized1[Double](C.this.dummy.asInstanceOf[Double])
        else
          if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Float))
            SpecObject1.mPrimitives_specialized1[Float](C.this.dummy.asInstanceOf[Float])
          else
            if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Int))
              SpecObject1.mPrimitives_specialized1[Int](C.this.dummy.asInstanceOf[Int])
            else
              if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Long))
                SpecObject1.mPrimitives_specialized1[Long](C.this.dummy.asInstanceOf[Long])
              else
                if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Short))
                  SpecObject1.mPrimitives_specialized1[Short](C.this.dummy.asInstanceOf[Short])
                else
                  if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Unit))
                    SpecObject1.mPrimitives_specialized1[Unit](C.this.dummy.asInstanceOf[Unit])
                  else
                    SpecObject1.mPrimitives_specialized1[T](C.this.dummy)
}.asInstanceOf[T];
    def mEverything(): T = {
  object SpecObject2 extends scala.AnyRef {
    def <init>(): SpecObject2.type = {
      SpecObject2.super.<init>();
      ()
    };
    def mEverything_specialized1[@specialized(scala.Boolean, scala.Double, scala.Short, scala.Long, scala.Float, scala.Int, scala.Char, scala.Byte, scala.Unit) T >: Nothing <: Any](C_this_dummy2: T): T = C_this_dummy2
  };
  import SpecObject2._;
  import scala.reflect.ManifestFactory;
  if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Boolean))
    SpecObject2.mEverything_specialized1[Boolean](C.this.dummy.asInstanceOf[Boolean])
  else
    if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Byte))
      SpecObject2.mEverything_specialized1[Byte](C.this.dummy.asInstanceOf[Byte])
    else
      if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Char))
        SpecObject2.mEverything_specialized1[Char](C.this.dummy.asInstanceOf[Char])
      else
        if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Double))
          SpecObject2.mEverything_specialized1[Double](C.this.dummy.asInstanceOf[Double])
        else
          if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Float))
            SpecObject2.mEverything_specialized1[Float](C.this.dummy.asInstanceOf[Float])
          else
            if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Int))
              SpecObject2.mEverything_specialized1[Int](C.this.dummy.asInstanceOf[Int])
            else
              if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Long))
                SpecObject2.mEverything_specialized1[Long](C.this.dummy.asInstanceOf[Long])
              else
                if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Short))
                  SpecObject2.mEverything_specialized1[Short](C.this.dummy.asInstanceOf[Short])
                else
                  if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Unit))
                    SpecObject2.mEverything_specialized1[Unit](C.this.dummy.asInstanceOf[Unit])
                  else
                    SpecObject2.mEverything_specialized1[T](C.this.dummy)
}.asInstanceOf[T];
    def mBits32AndUp(): T = {
  object SpecObject3 extends scala.AnyRef {
    def <init>(): SpecObject3.type = {
      SpecObject3.super.<init>();
      ()
    };
    def mBits32AndUp_specialized1[@specialized(scala.Double, scala.Float, scala.Int, scala.Long) T >: Nothing <: Any](C_this_dummy3: T): T = C_this_dummy3
  };
  import SpecObject3._;
  import scala.reflect.ManifestFactory;
  if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Double))
    SpecObject3.mBits32AndUp_specialized1[Double](C.this.dummy.asInstanceOf[Double])
  else
    if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Float))
      SpecObject3.mBits32AndUp_specialized1[Float](C.this.dummy.asInstanceOf[Float])
    else
      if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Int))
        SpecObject3.mBits32AndUp_specialized1[Int](C.this.dummy.asInstanceOf[Int])
      else
        if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Long))
          SpecObject3.mBits32AndUp_specialized1[Long](C.this.dummy.asInstanceOf[Long])
        else
          SpecObject3.mBits32AndUp_specialized1[T](C.this.dummy)
}.asInstanceOf[T];
    def mIntegral(): T = {
  object SpecObject4 extends scala.AnyRef {
    def <init>(): SpecObject4.type = {
      SpecObject4.super.<init>();
      ()
    };
    def mIntegral_specialized1[@specialized(scala.Short, scala.Long, scala.Int, scala.Char, scala.Byte) T >: Nothing <: Any](C_this_dummy4: T): T = C_this_dummy4
  };
  import SpecObject4._;
  import scala.reflect.ManifestFactory;
  if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Byte))
    SpecObject4.mIntegral_specialized1[Byte](C.this.dummy.asInstanceOf[Byte])
  else
    if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Char))
      SpecObject4.mIntegral_specialized1[Char](C.this.dummy.asInstanceOf[Char])
    else
      if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Int))
        SpecObject4.mIntegral_specialized1[Int](C.this.dummy.asInstanceOf[Int])
      else
        if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Long))
          SpecObject4.mIntegral_specialized1[Long](C.this.dummy.asInstanceOf[Long])
        else
          if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Short))
            SpecObject4.mIntegral_specialized1[Short](C.this.dummy.asInstanceOf[Short])
          else
            SpecObject4.mIntegral_specialized1[T](C.this.dummy)
}.asInstanceOf[T];
    def mAllNumeric(): T = {
  object SpecObject5 extends scala.AnyRef {
    def <init>(): SpecObject5.type = {
      SpecObject5.super.<init>();
      ()
    };
    def mAllNumeric_specialized1[@specialized(scala.Double, scala.Short, scala.Long, scala.Float, scala.Int, scala.Char, scala.Byte) T >: Nothing <: Any](C_this_dummy5: T): T = C_this_dummy5
  };
  import SpecObject5._;
  import scala.reflect.ManifestFactory;
  if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Byte))
    SpecObject5.mAllNumeric_specialized1[Byte](C.this.dummy.asInstanceOf[Byte])
  else
    if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Char))
      SpecObject5.mAllNumeric_specialized1[Char](C.this.dummy.asInstanceOf[Char])
    else
      if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Double))
        SpecObject5.mAllNumeric_specialized1[Double](C.this.dummy.asInstanceOf[Double])
      else
        if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Float))
          SpecObject5.mAllNumeric_specialized1[Float](C.this.dummy.asInstanceOf[Float])
        else
          if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Int))
            SpecObject5.mAllNumeric_specialized1[Int](C.this.dummy.asInstanceOf[Int])
          else
            if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Long))
              SpecObject5.mAllNumeric_specialized1[Long](C.this.dummy.asInstanceOf[Long])
            else
              if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Short))
                SpecObject5.mAllNumeric_specialized1[Short](C.this.dummy.asInstanceOf[Short])
              else
                SpecObject5.mAllNumeric_specialized1[T](C.this.dummy)
}.asInstanceOf[T];
    def mBestOfBreed(): T = {
  object SpecObject6 extends scala.AnyRef {
    def <init>(): SpecObject6.type = {
      SpecObject6.super.<init>();
      ()
    };
    def mBestOfBreed_specialized1[@specialized(scala.Boolean, scala.Double, scala.Int, scala.Unit) T >: Nothing <: Any](C_this_dummy6: T): T = C_this_dummy6
  };
  import SpecObject6._;
  import scala.reflect.ManifestFactory;
  if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Boolean))
    SpecObject6.mBestOfBreed_specialized1[Boolean](C.this.dummy.asInstanceOf[Boolean])
  else
    if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Double))
      SpecObject6.mBestOfBreed_specialized1[Double](C.this.dummy.asInstanceOf[Double])
    else
      if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Int))
        SpecObject6.mBestOfBreed_specialized1[Int](C.this.dummy.asInstanceOf[Int])
      else
        if (C.this.evidence$1.==(scala.reflect.ManifestFactory.Unit))
          SpecObject6.mBestOfBreed_specialized1[Unit](C.this.dummy.asInstanceOf[Unit])
        else
          SpecObject6.mBestOfBreed_specialized1[T](C.this.dummy)
}.asInstanceOf[T]
  }
}