[[syntax trees at end of                     typer]] // newSource1
package <empty> {
  import ch.epfl.lamp.specialized._;
  import scala.reflect.ClassTag;
  class C[T >: Nothing <: Any] extends scala.AnyRef {
    implicit <synthetic> <paramaccessor> private[this] val evidence$1: scala.reflect.ClassTag[T] = _;
    def <init>()(implicit evidence$1: scala.reflect.ClassTag[T]): C[T] = {
      C.super.<init>();
      ()
    };
    def mIntLongShort(): Unit = {
      def mIntLongShort_spec_Generic1(): Unit = scala.this.Predef.println();
      def mIntLongShort_spec_Int1(): Unit = scala.this.Predef.println();
      def mIntLongShort_spec_Long1(): Unit = scala.this.Predef.println();
      def mIntLongShort_spec_Short1(): Unit = scala.this.Predef.println();
      if (C.this.evidence$1.==(ManifestFactory.Int))
  mIntLongShort_spec_Int1()
else
  if (C.this.evidence$1.==(ManifestFactory.Long))
    mIntLongShort_spec_Long1()
  else
    if (C.this.evidence$1.==(ManifestFactory.Short))
      mIntLongShort_spec_Short1()
    else
      mIntLongShort_spec_Generic1().asInstanceOf[Unit]
    };
    def mDoubleFloat(): Unit = {
      def mDoubleFloat_spec_Generic1(): Unit = scala.this.Predef.println();
      def mDoubleFloat_spec_Double1(): Unit = scala.this.Predef.println();
      def mDoubleFloat_spec_Float1(): Unit = scala.this.Predef.println();
      if (C.this.evidence$1.==(ManifestFactory.Double))
  mDoubleFloat_spec_Double1()
else
  if (C.this.evidence$1.==(ManifestFactory.Float))
    mDoubleFloat_spec_Float1()
  else
    mDoubleFloat_spec_Generic1().asInstanceOf[Unit]
    };
    def mNumbers(): Unit = {
      def mNumbers_spec_Generic1(): Unit = scala.this.Predef.println();
      def mNumbers_spec_Double1(): Unit = scala.this.Predef.println();
      def mNumbers_spec_Float1(): Unit = scala.this.Predef.println();
      def mNumbers_spec_Int1(): Unit = scala.this.Predef.println();
      def mNumbers_spec_Long1(): Unit = scala.this.Predef.println();
      def mNumbers_spec_Short1(): Unit = scala.this.Predef.println();
      if (C.this.evidence$1.==(ManifestFactory.Double))
  mNumbers_spec_Double1()
else
  if (C.this.evidence$1.==(ManifestFactory.Float))
    mNumbers_spec_Float1()
  else
    if (C.this.evidence$1.==(ManifestFactory.Int))
      mNumbers_spec_Int1()
    else
      if (C.this.evidence$1.==(ManifestFactory.Long))
        mNumbers_spec_Long1()
      else
        if (C.this.evidence$1.==(ManifestFactory.Short))
          mNumbers_spec_Short1()
        else
          mNumbers_spec_Generic1().asInstanceOf[Unit]
    };
    def mEverything(): Unit = {
      def mEverything_spec_Generic1(): Unit = scala.this.Predef.println();
      def mEverything_spec_Boolean1(): Unit = scala.this.Predef.println();
      def mEverything_spec_Char1(): Unit = scala.this.Predef.println();
      def mEverything_spec_Double1(): Unit = scala.this.Predef.println();
      def mEverything_spec_Float1(): Unit = scala.this.Predef.println();
      def mEverything_spec_Int1(): Unit = scala.this.Predef.println();
      def mEverything_spec_Long1(): Unit = scala.this.Predef.println();
      def mEverything_spec_Short1(): Unit = scala.this.Predef.println();
      def mEverything_spec_Unit1(): Unit = scala.this.Predef.println();
      if (C.this.evidence$1.==(ManifestFactory.Boolean))
  mEverything_spec_Boolean1()
else
  if (C.this.evidence$1.==(ManifestFactory.Char))
    mEverything_spec_Char1()
  else
    if (C.this.evidence$1.==(ManifestFactory.Double))
      mEverything_spec_Double1()
    else
      if (C.this.evidence$1.==(ManifestFactory.Float))
        mEverything_spec_Float1()
      else
        if (C.this.evidence$1.==(ManifestFactory.Int))
          mEverything_spec_Int1()
        else
          if (C.this.evidence$1.==(ManifestFactory.Long))
            mEverything_spec_Long1()
          else
            if (C.this.evidence$1.==(ManifestFactory.Short))
              mEverything_spec_Short1()
            else
              if (C.this.evidence$1.==(ManifestFactory.Unit))
                mEverything_spec_Unit1()
              else
                mEverything_spec_Generic1().asInstanceOf[Unit]
    }
  }
}