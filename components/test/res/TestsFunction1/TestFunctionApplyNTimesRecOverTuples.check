[[syntax trees at end of                     typer]] // newSource1
package ch.epfl.lamp.specialized.benchmark.tests {
  import scala.util.control.Exception;
  import scala.reflect.ClassTag;
  import scala.annotation.tailrec;
  import ch.epfl.lamp.specialized._;
  class TestFunctionApplyNTimesRecOverTuples[T >: Nothing <: Any] extends scala.AnyRef {
    <paramaccessor> private[this] val times: Int = _;
    <paramaccessor> private[this] val init: (T, T) = _;
    <paramaccessor> private[this] val func: T => T = _;
    implicit <synthetic> <paramaccessor> private[this] val evidence$1: scala.reflect.ClassTag[T] = _;
    def <init>(times: Int, init: (T, T), func: T => T)(implicit evidence$1: scala.reflect.ClassTag[T]): ch.epfl.lamp.specialized.benchmark.tests.TestFunctionApplyNTimesRecOverTuples[T] = {
      TestFunctionApplyNTimesRecOverTuples.super.<init>();
      ()
    };
    def applyFunction: (T, T) = {
      def applyFunction_spec_Int1(TestFunctionApplyNTimesRecOverTuples_this_func1: Int => Int, TestFunctionApplyNTimesRecOverTuples_this_init1: (Int, Int)): (Int, Int) = {
        def rec(n: Int, last: (Int, Int)): (Int, Int) = if (n.==(0))
          last
        else
          rec(n.-(1), scala.Tuple2.apply[Int, Int](TestFunctionApplyNTimesRecOverTuples_this_func1.apply(last._1), TestFunctionApplyNTimesRecOverTuples_this_func1.apply(last._2)));
        rec(TestFunctionApplyNTimesRecOverTuples.this.times, TestFunctionApplyNTimesRecOverTuples_this_init1)
      };
      def applyFunction_spec_Double1(TestFunctionApplyNTimesRecOverTuples_this_func1: Double => Double, TestFunctionApplyNTimesRecOverTuples_this_init1: (Double, Double)): (Double, Double) = {
        def rec(n: Int, last: (Double, Double)): (Double, Double) = if (n.==(0))
          last
        else
          rec(n.-(1), scala.Tuple2.apply[Double, Double](TestFunctionApplyNTimesRecOverTuples_this_func1.apply(last._1), TestFunctionApplyNTimesRecOverTuples_this_func1.apply(last._2)));
        rec(TestFunctionApplyNTimesRecOverTuples.this.times, TestFunctionApplyNTimesRecOverTuples_this_init1)
      };
      def applyFunction_spec_Boolean1(TestFunctionApplyNTimesRecOverTuples_this_func1: Boolean => Boolean, TestFunctionApplyNTimesRecOverTuples_this_init1: (Boolean, Boolean)): (Boolean, Boolean) = {
        def rec(n: Int, last: (Boolean, Boolean)): (Boolean, Boolean) = if (n.==(0))
          last
        else
          rec(n.-(1), scala.Tuple2.apply[Boolean, Boolean](TestFunctionApplyNTimesRecOverTuples_this_func1.apply(last._1), TestFunctionApplyNTimesRecOverTuples_this_func1.apply(last._2)));
        rec(TestFunctionApplyNTimesRecOverTuples.this.times, TestFunctionApplyNTimesRecOverTuples_this_init1)
      };
      def applyFunction_spec_Generic1(): (T, T) = {
        def rec(n: Int, last: (T, T)): (T, T) = if (n.==(0))
          last
        else
          rec(n.-(1), scala.Tuple2.apply[T, T](TestFunctionApplyNTimesRecOverTuples.this.func.apply(last._1), TestFunctionApplyNTimesRecOverTuples.this.func.apply(last._2)));
        rec(TestFunctionApplyNTimesRecOverTuples.this.times, TestFunctionApplyNTimesRecOverTuples.this.init)
      };
      if (TestFunctionApplyNTimesRecOverTuples.this.evidence$1.==(Predef.manifest[Int](ManifestFactory.Int)))
  applyFunction_spec_Int1(TestFunctionApplyNTimesRecOverTuples.this.func.asInstanceOf[Int => Int], TestFunctionApplyNTimesRecOverTuples.this.init.asInstanceOf[(Int, Int)])
else
  if (TestFunctionApplyNTimesRecOverTuples.this.evidence$1.==(Predef.manifest[Double](ManifestFactory.Double)))
    applyFunction_spec_Double1(TestFunctionApplyNTimesRecOverTuples.this.func.asInstanceOf[Double => Double], TestFunctionApplyNTimesRecOverTuples.this.init.asInstanceOf[(Double, Double)])
  else
    if (TestFunctionApplyNTimesRecOverTuples.this.evidence$1.==(Predef.manifest[Boolean](ManifestFactory.Boolean)))
      applyFunction_spec_Boolean1(TestFunctionApplyNTimesRecOverTuples.this.func.asInstanceOf[Boolean => Boolean], TestFunctionApplyNTimesRecOverTuples.this.init.asInstanceOf[(Boolean, Boolean)])
    else
      applyFunction_spec_Generic1().asInstanceOf[(T, T)]
    }
  }
}

[[syntax trees at end of                       jvm]] // newSource1
package ch.epfl.lamp.specialized.benchmark.tests {
  class TestFunctionApplyNTimesRecOverTuples extends Object {
    <paramaccessor> private[this] val times: Int = _;
    <paramaccessor> private[this] val init: Tuple2 = _;
    <paramaccessor> private[this] val func: Function1 = _;
    implicit <synthetic> <paramaccessor> private[this] val evidence$1: reflect.ClassTag = _;
    def applyFunction(): Tuple2 = if (TestFunctionApplyNTimesRecOverTuples.this.evidence$1.==(Predef.manifest(ManifestFactory.Int())))
      TestFunctionApplyNTimesRecOverTuples.this.applyFunction_spec_Int1$1(TestFunctionApplyNTimesRecOverTuples.this.func, TestFunctionApplyNTimesRecOverTuples.this.init)
    else
      if (TestFunctionApplyNTimesRecOverTuples.this.evidence$1.==(Predef.manifest(ManifestFactory.Double())))
        TestFunctionApplyNTimesRecOverTuples.this.applyFunction_spec_Double1$1(TestFunctionApplyNTimesRecOverTuples.this.func, TestFunctionApplyNTimesRecOverTuples.this.init)
      else
        if (TestFunctionApplyNTimesRecOverTuples.this.evidence$1.==(Predef.manifest(ManifestFactory.Boolean())))
          TestFunctionApplyNTimesRecOverTuples.this.applyFunction_spec_Boolean1$1(TestFunctionApplyNTimesRecOverTuples.this.func, TestFunctionApplyNTimesRecOverTuples.this.init)
        else
          TestFunctionApplyNTimesRecOverTuples.this.applyFunction_spec_Generic1$1();
    final private[this] def rec$1(n: Int, last: Tuple2, TestFunctionApplyNTimesRecOverTuples_this_func1$1: Function1): Tuple2 = {
      <synthetic> val _$this: ch.epfl.lamp.specialized.benchmark.tests.TestFunctionApplyNTimesRecOverTuples = TestFunctionApplyNTimesRecOverTuples.this;
      _rec(_$this: ch.epfl.lamp.specialized.benchmark.tests.TestFunctionApplyNTimesRecOverTuples, n: Int, last: Tuple2){
        if (n.==(0))
          last
        else
          _rec(TestFunctionApplyNTimesRecOverTuples.this, n.-(1), new Tuple2$mcII$sp(TestFunctionApplyNTimesRecOverTuples_this_func1$1.apply$mcII$sp(last._1$mcI$sp()), TestFunctionApplyNTimesRecOverTuples_this_func1$1.apply$mcII$sp(last._2$mcI$sp())))
      }
    };
    final private[this] def applyFunction_spec_Int1$1(TestFunctionApplyNTimesRecOverTuples_this_func1: Function1, TestFunctionApplyNTimesRecOverTuples_this_init1: Tuple2): Tuple2 = TestFunctionApplyNTimesRecOverTuples.this.rec$1(TestFunctionApplyNTimesRecOverTuples.this.times, TestFunctionApplyNTimesRecOverTuples_this_init1, TestFunctionApplyNTimesRecOverTuples_this_func1);
    final private[this] def rec$2(n: Int, last: Tuple2, TestFunctionApplyNTimesRecOverTuples_this_func1$2: Function1): Tuple2 = {
      <synthetic> val _$this: ch.epfl.lamp.specialized.benchmark.tests.TestFunctionApplyNTimesRecOverTuples = TestFunctionApplyNTimesRecOverTuples.this;
      _rec(_$this: ch.epfl.lamp.specialized.benchmark.tests.TestFunctionApplyNTimesRecOverTuples, n: Int, last: Tuple2){
        if (n.==(0))
          last
        else
          _rec(TestFunctionApplyNTimesRecOverTuples.this, n.-(1), new Tuple2$mcDD$sp(TestFunctionApplyNTimesRecOverTuples_this_func1$2.apply$mcDD$sp(last._1$mcD$sp()), TestFunctionApplyNTimesRecOverTuples_this_func1$2.apply$mcDD$sp(last._2$mcD$sp())))
      }
    };
    final private[this] def applyFunction_spec_Double1$1(TestFunctionApplyNTimesRecOverTuples_this_func1: Function1, TestFunctionApplyNTimesRecOverTuples_this_init1: Tuple2): Tuple2 = TestFunctionApplyNTimesRecOverTuples.this.rec$2(TestFunctionApplyNTimesRecOverTuples.this.times, TestFunctionApplyNTimesRecOverTuples_this_init1, TestFunctionApplyNTimesRecOverTuples_this_func1);
    final private[this] def rec$3(n: Int, last: Tuple2, TestFunctionApplyNTimesRecOverTuples_this_func1$3: Function1): Tuple2 = {
      <synthetic> val _$this: ch.epfl.lamp.specialized.benchmark.tests.TestFunctionApplyNTimesRecOverTuples = TestFunctionApplyNTimesRecOverTuples.this;
      _rec(_$this: ch.epfl.lamp.specialized.benchmark.tests.TestFunctionApplyNTimesRecOverTuples, n: Int, last: Tuple2){
        if (n.==(0))
          last
        else
          _rec(TestFunctionApplyNTimesRecOverTuples.this, n.-(1), new Tuple2$mcZZ$sp(scala.Boolean.unbox(TestFunctionApplyNTimesRecOverTuples_this_func1$3.apply(scala.Boolean.box(last._1$mcZ$sp()))), scala.Boolean.unbox(TestFunctionApplyNTimesRecOverTuples_this_func1$3.apply(scala.Boolean.box(last._2$mcZ$sp())))))
      }
    };
    final private[this] def applyFunction_spec_Boolean1$1(TestFunctionApplyNTimesRecOverTuples_this_func1: Function1, TestFunctionApplyNTimesRecOverTuples_this_init1: Tuple2): Tuple2 = TestFunctionApplyNTimesRecOverTuples.this.rec$3(TestFunctionApplyNTimesRecOverTuples.this.times, TestFunctionApplyNTimesRecOverTuples_this_init1, TestFunctionApplyNTimesRecOverTuples_this_func1);
    final private[this] def rec$4(n: Int, last: Tuple2): Tuple2 = {
      <synthetic> val _$this: ch.epfl.lamp.specialized.benchmark.tests.TestFunctionApplyNTimesRecOverTuples = TestFunctionApplyNTimesRecOverTuples.this;
      _rec(_$this: ch.epfl.lamp.specialized.benchmark.tests.TestFunctionApplyNTimesRecOverTuples, n: Int, last: Tuple2){
        if (n.==(0))
          last
        else
          _rec(TestFunctionApplyNTimesRecOverTuples.this, n.-(1), new Tuple2(TestFunctionApplyNTimesRecOverTuples.this.func.apply(last._1()), TestFunctionApplyNTimesRecOverTuples.this.func.apply(last._2())))
      }
    };
    final private[this] def applyFunction_spec_Generic1$1(): Tuple2 = TestFunctionApplyNTimesRecOverTuples.this.rec$4(TestFunctionApplyNTimesRecOverTuples.this.times, TestFunctionApplyNTimesRecOverTuples.this.init);
    def <init>(times: Int, init: Tuple2, func: Function1, evidence$1: reflect.ClassTag): ch.epfl.lamp.specialized.benchmark.tests.TestFunctionApplyNTimesRecOverTuples = {
      TestFunctionApplyNTimesRecOverTuples.this.times = times;
      TestFunctionApplyNTimesRecOverTuples.this.init = init;
      TestFunctionApplyNTimesRecOverTuples.this.func = func;
      TestFunctionApplyNTimesRecOverTuples.this.evidence$1 = evidence$1;
      TestFunctionApplyNTimesRecOverTuples.super.<init>();
      ()
    }
  }
}