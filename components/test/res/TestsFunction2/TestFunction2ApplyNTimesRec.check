[[syntax trees at end of                     typer]] // newSource1
package <empty> {
  import scala.reflect.ClassTag;
  import scala.annotation.tailrec;
  import ch.epfl.lamp.specialized._;
  class TestFunction2ApplyNTimesRec[T >: Nothing <: Any] extends scala.AnyRef {
    <paramaccessor> private[this] val times: Int = _;
    <stable> <accessor> <paramaccessor> def times: Int = TestFunction2ApplyNTimesRec.this.times;
    <paramaccessor> private[this] val init0: T = _;
    <stable> <accessor> <paramaccessor> def init0: T = TestFunction2ApplyNTimesRec.this.init0;
    <paramaccessor> private[this] val init1: T = _;
    <stable> <accessor> <paramaccessor> def init1: T = TestFunction2ApplyNTimesRec.this.init1;
    <paramaccessor> private[this] val func: (T, T) => T = _;
    <stable> <accessor> <paramaccessor> def func: (T, T) => T = TestFunction2ApplyNTimesRec.this.func;
    implicit <synthetic> <paramaccessor> private[this] val evidence$1: scala.reflect.ClassTag[T] = _;
    def <init>(times: Int)(init0: T, init1: T, func: (T, T) => T)(implicit evidence$1: scala.reflect.ClassTag[T]): TestFunction2ApplyNTimesRec[T] = {
      TestFunction2ApplyNTimesRec.super.<init>();
      ()
    };
    def applyFunction: T = {
      def applyFunction_spec_Generic1(): T = {
        def rec(n: Int, beforelast: T, last: T): T = if (n.==(0))
          last
        else
          rec(n.-(1), last, TestFunction2ApplyNTimesRec.this.func.apply(beforelast, last));
        rec(TestFunction2ApplyNTimesRec.this.times, TestFunction2ApplyNTimesRec.this.init0, TestFunction2ApplyNTimesRec.this.init1)
      };
      def applyFunction_spec_Boolean1(TestFunction2ApplyNTimesRec_this_func1: (Boolean, Boolean) => Boolean, TestFunction2ApplyNTimesRec_this_init01: Boolean, TestFunction2ApplyNTimesRec_this_init11: Boolean): Boolean = {
        def rec(n: Int, beforelast: Boolean, last: Boolean): Boolean = if (n.==(0))
          last
        else
          rec(n.-(1), last, TestFunction2ApplyNTimesRec_this_func1.apply(beforelast, last));
        rec(TestFunction2ApplyNTimesRec.this.times, TestFunction2ApplyNTimesRec_this_init01, TestFunction2ApplyNTimesRec_this_init11)
      };
      def applyFunction_spec_Double1(TestFunction2ApplyNTimesRec_this_func1: (Double, Double) => Double, TestFunction2ApplyNTimesRec_this_init01: Double, TestFunction2ApplyNTimesRec_this_init11: Double): Double = {
        def rec(n: Int, beforelast: Double, last: Double): Double = if (n.==(0))
          last
        else
          rec(n.-(1), last, TestFunction2ApplyNTimesRec_this_func1.apply(beforelast, last));
        rec(TestFunction2ApplyNTimesRec.this.times, TestFunction2ApplyNTimesRec_this_init01, TestFunction2ApplyNTimesRec_this_init11)
      };
      def applyFunction_spec_Int1(TestFunction2ApplyNTimesRec_this_func1: (Int, Int) => Int, TestFunction2ApplyNTimesRec_this_init01: Int, TestFunction2ApplyNTimesRec_this_init11: Int): Int = {
        def rec(n: Int, beforelast: Int, last: Int): Int = if (n.==(0))
          last
        else
          rec(n.-(1), last, TestFunction2ApplyNTimesRec_this_func1.apply(beforelast, last));
        rec(TestFunction2ApplyNTimesRec.this.times, TestFunction2ApplyNTimesRec_this_init01, TestFunction2ApplyNTimesRec_this_init11)
      };
      if (TestFunction2ApplyNTimesRec.this.evidence$1.==(ManifestFactory.Boolean))
  applyFunction_spec_Boolean1(TestFunction2ApplyNTimesRec.this.func.asInstanceOf[(Boolean, Boolean) => Boolean], TestFunction2ApplyNTimesRec.this.init0.asInstanceOf[Boolean], TestFunction2ApplyNTimesRec.this.init1.asInstanceOf[Boolean])
else
  if (TestFunction2ApplyNTimesRec.this.evidence$1.==(ManifestFactory.Double))
    applyFunction_spec_Double1(TestFunction2ApplyNTimesRec.this.func.asInstanceOf[(Double, Double) => Double], TestFunction2ApplyNTimesRec.this.init0.asInstanceOf[Double], TestFunction2ApplyNTimesRec.this.init1.asInstanceOf[Double])
  else
    if (TestFunction2ApplyNTimesRec.this.evidence$1.==(ManifestFactory.Int))
      applyFunction_spec_Int1(TestFunction2ApplyNTimesRec.this.func.asInstanceOf[(Int, Int) => Int], TestFunction2ApplyNTimesRec.this.init0.asInstanceOf[Int], TestFunction2ApplyNTimesRec.this.init1.asInstanceOf[Int])
    else
      applyFunction_spec_Generic1().asInstanceOf[T]
    }
  }
}

[[syntax trees at end of                       jvm]] // newSource1
package <empty> {
  class TestFunction2ApplyNTimesRec extends Object {
    <paramaccessor> private[this] val times: Int = _;
    <stable> <accessor> <paramaccessor> def times(): Int = TestFunction2ApplyNTimesRec.this.times;
    <paramaccessor> private[this] val init0: Object = _;
    <stable> <accessor> <paramaccessor> def init0(): Object = TestFunction2ApplyNTimesRec.this.init0;
    <paramaccessor> private[this] val init1: Object = _;
    <stable> <accessor> <paramaccessor> def init1(): Object = TestFunction2ApplyNTimesRec.this.init1;
    <paramaccessor> private[this] val func: Function2 = _;
    <stable> <accessor> <paramaccessor> def func(): Function2 = TestFunction2ApplyNTimesRec.this.func;
    implicit <synthetic> <paramaccessor> private[this] val evidence$1: reflect.ClassTag = _;
    def applyFunction(): Object = if (TestFunction2ApplyNTimesRec.this.evidence$1.==(ManifestFactory.Boolean()))
      scala.Boolean.box(TestFunction2ApplyNTimesRec.this.applyFunction_spec_Boolean1$1(TestFunction2ApplyNTimesRec.this.func(), scala.Boolean.unbox(TestFunction2ApplyNTimesRec.this.init0()), scala.Boolean.unbox(TestFunction2ApplyNTimesRec.this.init1())))
    else
      if (TestFunction2ApplyNTimesRec.this.evidence$1.==(ManifestFactory.Double()))
        scala.Double.box(TestFunction2ApplyNTimesRec.this.applyFunction_spec_Double1$1(TestFunction2ApplyNTimesRec.this.func(), scala.Double.unbox(TestFunction2ApplyNTimesRec.this.init0()), scala.Double.unbox(TestFunction2ApplyNTimesRec.this.init1())))
      else
        if (TestFunction2ApplyNTimesRec.this.evidence$1.==(ManifestFactory.Int()))
          scala.Int.box(TestFunction2ApplyNTimesRec.this.applyFunction_spec_Int1$1(TestFunction2ApplyNTimesRec.this.func(), scala.Int.unbox(TestFunction2ApplyNTimesRec.this.init0()), scala.Int.unbox(TestFunction2ApplyNTimesRec.this.init1())))
        else
          TestFunction2ApplyNTimesRec.this.applyFunction_spec_Generic1$1();
    final private[this] def rec$1(n: Int, beforelast: Object, last: Object): Object = {
      <synthetic> val _$this: TestFunction2ApplyNTimesRec = TestFunction2ApplyNTimesRec.this;
      _rec(_$this: TestFunction2ApplyNTimesRec, n: Int, beforelast: Object, last: Object){
        if (n.==(0))
          last
        else
          _rec(TestFunction2ApplyNTimesRec.this, n.-(1), last, TestFunction2ApplyNTimesRec.this.func().apply(beforelast, last))
      }
    };
    final private[this] def applyFunction_spec_Generic1$1(): Object = TestFunction2ApplyNTimesRec.this.rec$1(TestFunction2ApplyNTimesRec.this.times(), TestFunction2ApplyNTimesRec.this.init0(), TestFunction2ApplyNTimesRec.this.init1());
    final private[this] def rec$2(n: Int, beforelast: Boolean, last: Boolean, TestFunction2ApplyNTimesRec_this_func1$1: Function2): Boolean = {
      <synthetic> val _$this: TestFunction2ApplyNTimesRec = TestFunction2ApplyNTimesRec.this;
      _rec(_$this: TestFunction2ApplyNTimesRec, n: Int, beforelast: Boolean, last: Boolean){
        if (n.==(0))
          last
        else
          _rec(TestFunction2ApplyNTimesRec.this, n.-(1), last, scala.Boolean.unbox(TestFunction2ApplyNTimesRec_this_func1$1.apply(scala.Boolean.box(beforelast), scala.Boolean.box(last))))
      }
    };
    final private[this] def applyFunction_spec_Boolean1$1(TestFunction2ApplyNTimesRec_this_func1: Function2, TestFunction2ApplyNTimesRec_this_init01: Boolean, TestFunction2ApplyNTimesRec_this_init11: Boolean): Boolean = TestFunction2ApplyNTimesRec.this.rec$2(TestFunction2ApplyNTimesRec.this.times(), TestFunction2ApplyNTimesRec_this_init01, TestFunction2ApplyNTimesRec_this_init11, TestFunction2ApplyNTimesRec_this_func1);
    final private[this] def rec$3(n: Int, beforelast: Double, last: Double, TestFunction2ApplyNTimesRec_this_func1$2: Function2): Double = {
      <synthetic> val _$this: TestFunction2ApplyNTimesRec = TestFunction2ApplyNTimesRec.this;
      _rec(_$this: TestFunction2ApplyNTimesRec, n: Int, beforelast: Double, last: Double){
        if (n.==(0))
          last
        else
          _rec(TestFunction2ApplyNTimesRec.this, n.-(1), last, TestFunction2ApplyNTimesRec_this_func1$2.apply$mcDDD$sp(beforelast, last))
      }
    };
    final private[this] def applyFunction_spec_Double1$1(TestFunction2ApplyNTimesRec_this_func1: Function2, TestFunction2ApplyNTimesRec_this_init01: Double, TestFunction2ApplyNTimesRec_this_init11: Double): Double = TestFunction2ApplyNTimesRec.this.rec$3(TestFunction2ApplyNTimesRec.this.times(), TestFunction2ApplyNTimesRec_this_init01, TestFunction2ApplyNTimesRec_this_init11, TestFunction2ApplyNTimesRec_this_func1);
    final private[this] def rec$4(n: Int, beforelast: Int, last: Int, TestFunction2ApplyNTimesRec_this_func1$3: Function2): Int = {
      <synthetic> val _$this: TestFunction2ApplyNTimesRec = TestFunction2ApplyNTimesRec.this;
      _rec(_$this: TestFunction2ApplyNTimesRec, n: Int, beforelast: Int, last: Int){
        if (n.==(0))
          last
        else
          _rec(TestFunction2ApplyNTimesRec.this, n.-(1), last, TestFunction2ApplyNTimesRec_this_func1$3.apply$mcIII$sp(beforelast, last))
      }
    };
    final private[this] def applyFunction_spec_Int1$1(TestFunction2ApplyNTimesRec_this_func1: Function2, TestFunction2ApplyNTimesRec_this_init01: Int, TestFunction2ApplyNTimesRec_this_init11: Int): Int = TestFunction2ApplyNTimesRec.this.rec$4(TestFunction2ApplyNTimesRec.this.times(), TestFunction2ApplyNTimesRec_this_init01, TestFunction2ApplyNTimesRec_this_init11, TestFunction2ApplyNTimesRec_this_func1);
    def <init>(times: Int, init0: Object, init1: Object, func: Function2, evidence$1: reflect.ClassTag): TestFunction2ApplyNTimesRec = {
      TestFunction2ApplyNTimesRec.this.times = times;
      TestFunction2ApplyNTimesRec.this.init0 = init0;
      TestFunction2ApplyNTimesRec.this.init1 = init1;
      TestFunction2ApplyNTimesRec.this.func = func;
      TestFunction2ApplyNTimesRec.this.evidence$1 = evidence$1;
      TestFunction2ApplyNTimesRec.super.<init>();
      ()
    }
  }
}